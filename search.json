[{"title":"0. 引言","url":"/2023/10/05/0-%E5%BC%95%E8%A8%80/","content":"<p>凸优化系列是我在23年10月开启的一项计划。主要是读论文发现需要凸优化的知识，奈何我才刚上大二没有学到这门课程。</p>\r\n<p>于是打算自学，参考的教程是<a\r\nhref=\"https://www.bilibili.com/video/BV19M411T7S7?p=1&amp;vd_source=2501060da9b4bef86e2b8ec8a8d880b5\">中科大凌青老师的教学视频</a>。</p>\r\n<p>文中的笔记是我看完课程后的思考与总结，可能有错误还请指出！我速速修改=w=</p>\r\n<span id=\"more\"></span>\r\n<p><img src=\"1.jpg\" /></p>\r\n","categories":["凸优化","学习笔记"]},{"title":"1. shell","url":"/2023/10/11/1-shell/","content":"<p>大二数据库期末Lab是设计一个在Linux环境下的数据库。然后涉及到许多底层关于文件读写啥的。助教给的代码里一堆需要掌握Linux系统编程基础知识才能理解的东西。所以就跑来自学了。</p>\r\n<p>这个系列的blog比较水主要是给自己看的。所以挑自己薄弱的地方进行记录。</p>\r\n<p>shell：命令解释器。</p>\r\n<p>Linux系统里有很多种shell，cat /bin/shells查看本机中有哪些shell，echo\r\n$SHELL查看本机正在使用哪种shell。一般都是/bin/bash，即bash。</p>\r\n<span id=\"more\"></span>\r\n<p>加快编程速度的tips：</p>\r\n<ol type=\"1\">\r\n<li>用tab补齐</li>\r\n<li>ctrl + a, ctrl + e, ctrl + u</li>\r\n<li>Windows 下快捷键\r\n<ol type=\"1\">\r\n<li>win + e：资源管理器</li>\r\n<li>win + d(desktop)：回到桌面</li>\r\n<li>wn + q(query)：打开win搜索栏</li>\r\n<li>win + ←/→：分屏</li>\r\n<li>win + 数字键：切换/打开到到不同程序</li>\r\n<li>ctrl + shift + N：新建文件夹</li>\r\n<li>在资源管理器中backspace：返回上一级目录</li>\r\n<li>alt + tab：切换应用</li>\r\n<li>alt（用右边的alt）+ enter：查看\"属性\"</li>\r\n<li>alt（用右边的alt） + F4：关闭当前应用程序</li>\r\n<li>win +\r\n/：将当前应用置于顶层（需安装PowerToys实现，且我修改了快捷键）</li>\r\n<li>ctrl + shift + T：win下创建新的shell</li>\r\n<li>ctrl + shift + w：删除一个shell标签</li>\r\n<li>ctrl + shift + N：创建一个新shell</li>\r\n</ol></li>\r\n<li>Edge下快捷键\r\n<ol type=\"1\">\r\n<li>ctrl + E：在地址栏打开搜索</li>\r\n<li>ctrl + H：打开历史记录</li>\r\n<li>ctrl + J：打开下载记录</li>\r\n<li>ctrl + t：新建 标签页</li>\r\n<li>ctrl+ 数字键：切换到不同标签页</li>\r\n<li>alt + ←/→：前进/后退</li>\r\n<li>Pgup/Pgdn：上下滚动屏幕</li>\r\n<li>ctrl + Pgup/Pgdn：切换到 上/下一个标签页</li>\r\n<li>home/end：回到页顶/页末</li>\r\n<li>ctrl + F6将焦点移动到web内容上</li>\r\n</ol></li>\r\n</ol>\r\n","categories":["Linux","系统编程"]},{"title":"10. 其它指令","url":"/2023/10/11/10-%E5%85%B6%E5%AE%83%E6%8C%87%E4%BB%A4/","content":"<p>alias 别名 = '指令'：起别名（我设置了一个alias lh='ls -l -h'）</p>\r\n<p>但是alias当你退出终端时就会失效，所以为了永久有效，可以把它写到~/.bashrc里，然后source\r\n~./bashrc刷新一下。</p>\r\n<span id=\"more\"></span>\r\n<p>后续有什么常用的再加上去... ...待填坑</p>\r\n","categories":["Linux","系统编程"]},{"title":"1. 仿射集/凸集/凸锥","url":"/2023/10/05/1-%E4%BB%BF%E5%B0%84%E9%9B%86-%E5%87%B8%E9%9B%86-%E5%87%B8%E9%94%A5/","content":"<p>介绍了仿射集、凸集、凸锥的概念，以及三者之间的联系。</p>\r\n<span id=\"more\"></span>\r\n<p><img src=\"1.jpg\" /></p>\r\n<p><img src=\"2.jpg\" /></p>\r\n","categories":["凸优化","学习笔记"]},{"title":"11. 总结1","url":"/2023/10/11/11-%E6%80%BB%E7%BB%931/","content":"<ol type=\"1\">\r\n<li>多用tab键</li>\r\n<li>多用快捷键：ctrl + a，ctrl + e，ctrl + u</li>\r\n</ol>\r\n<span id=\"more\"></span>\r\n<ol start=\"3\" type=\"1\">\r\n<li>熟悉Linux基本文件类型：\r\n<ol type=\"1\">\r\n<li>普通文件：-</li>\r\n<li>目录问价：d</li>\r\n<li>字符设备文件：c</li>\r\n<li>块设备文件：b</li>\r\n<li>软链接：l（设置软链接记得用绝对路径）</li>\r\n<li>管道文件：p</li>\r\n<li>套接字：s</li>\r\n</ol></li>\r\n<li>Linux系统目录意义\r\n<ol type=\"1\">\r\n<li>/etc：配置文件信息</li>\r\n<li>/hone：用户目录</li>\r\n<li>/lib：库目录（比如C库、python库）</li>\r\n<li>/media、/mnt：磁盘挂载目录</li>\r\n<li>/opt、/proc：进程目录</li>\r\n<li>/usr：Unix Software Resource，软件目录，比如第三方安装的qq</li>\r\n<li>/bin：存放二进制可执行文件</li>\r\n<li>/boot：存放开机启动程序</li>\r\n</ol></li>\r\n<li>基本操作\r\n<ol type=\"1\">\r\n<li>mkdir name</li>\r\n<li>touch name</li>\r\n<li>rm name / rm -r name</li>\r\n<li>cp 被移动path 目标path / cp 被移动path 目标path - r</li>\r\n<li>mv 被移动path 目标path</li>\r\n</ol></li>\r\n<li>找文件\r\n<ol type=\"1\">\r\n<li>基本的查找（看有or没有）\r\n<ol type=\"1\">\r\n<li>find path -name 'xxx'</li>\r\n<li>find path -type 'xxx'</li>\r\n<li>find path -size +/-xxxk/M/G</li>\r\n</ol></li>\r\n<li>详细的查找（看要查找的文件的具体信息）\r\n<ol type=\"1\">\r\n<li>find ...... | xargs ls -l</li>\r\n</ol></li>\r\n</ol></li>\r\n<li>找内容\r\n<ol type=\"1\">\r\n<li>在目录中找\r\n<ol type=\"1\">\r\n<li>grep 'xxx' path -r -n</li>\r\n</ol></li>\r\n<li>在特定内容中找\r\n<ol type=\"1\">\r\n<li>ls -l | grep 'xxx' -n</li>\r\n<li>ps aux | grep 'xxx' -n</li>\r\n<li>cat xxx.txt | grep 'xxx' -n</li>\r\n</ol></li>\r\n</ol></li>\r\n<li>批量修改文件\r\n<ol type=\"1\">\r\n<li>find path -name/-type/-size 筛选条件 -exec rm {} ;</li>\r\n</ol></li>\r\n<li>压缩/解压\r\n<ol type=\"1\">\r\n<li>压缩：tar -zcvf name 压缩材料</li>\r\n<li>解压：tar -zxvf name</li>\r\n</ol></li>\r\n</ol>\r\n<hr />\r\n<ol type=\"1\">\r\n<li>Windows 下快捷键\r\n<ol type=\"1\">\r\n<li>win + e：资源管理器</li>\r\n<li>win + d(desktop)：回到桌面</li>\r\n<li>wn + q(query)：打开win搜索栏</li>\r\n<li>win + ←/→：分屏</li>\r\n<li>win + 数字键：切换/打开到到不同程序</li>\r\n<li>ctrl + shift + N：新建文件夹</li>\r\n<li>在资源管理器中backspace：返回上一级目录</li>\r\n<li>alt + tab：切换应用</li>\r\n<li>alt（用右边的alt）+ enter：查看\"属性\"</li>\r\n<li>alt（用右边的alt） + F4：关闭当前应用程序</li>\r\n<li>win +\r\n/：将当前应用置于顶层（需安装PowerToys实现，且我修改了快捷键）</li>\r\n<li>ctrl + shift + T：win下创建新的shell</li>\r\n<li>ctrl + shift + w：删除一个shell标签</li>\r\n<li>ctrl + shift + N：创建一个新shell</li>\r\n</ol></li>\r\n<li>Edge下快捷键\r\n<ol type=\"1\">\r\n<li>ctrl + E：在地址栏打开搜索</li>\r\n<li>ctrl + H：打开历史记录</li>\r\n<li>ctrl + J：打开下载记录</li>\r\n<li>ctrl + t：新建 标签页</li>\r\n<li>ctrl+ 数字键：切换到不同标签页</li>\r\n<li>alt + ←/→：前进/后退</li>\r\n<li>Pgup/Pgdn：上下滚动屏幕</li>\r\n<li>ctrl + Pgup/Pgdn：切换到 上/下一个标签页</li>\r\n<li>home/end：回到页顶/页末</li>\r\n<li>ctrl + F6将焦点移动到web内容上</li>\r\n</ol></li>\r\n</ol>\r\n","categories":["Linux","系统编程"]},{"title":"12. vim基础用法","url":"/2023/10/11/12-vim%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/","content":"<p>这个系列的Blog的目的是为了能设计出数据库。所以我个人认为没必要花费很多时间在运用Vim上。固然Vim是一款很好的软件，但是它的学习成本太高了。而且处理文本与设计数据库两件事关系其实不是特别大。所以我在后续gedit来代替vim。（gedit退出快捷键：crtl\r\n+ Q）</p>\r\n<span id=\"more\"></span>\r\n<p>虽然但是，至少还是要把Vim的一些基础命令学了：</p>\r\n<ol type=\"1\">\r\n<li>其它\r\n<ol type=\"1\">\r\n<li>a：进入打字模式</li>\r\n<li>:wq：保存&amp;退出</li>\r\n</ol></li>\r\n<li>移动\r\n<ol type=\"1\">\r\n<li>hjkl：上下左右</li>\r\n<li>0：移动到行首</li>\r\n<li>$：移动到行尾</li>\r\n<li>gg：移动到文件开头</li>\r\n<li>G：移动到文件结尾</li>\r\n<li>数字 + G：移动到指定行</li>\r\n<li>%：移动到匹配的{}、()、[]</li>\r\n</ol></li>\r\n<li>删除\r\n<ol type=\"1\">\r\n<li>x：删除单个字符</li>\r\n<li>dd：删除当前行</li>\r\n<li>d0：删除光标到行首</li>\r\n<li>d$：删除光标到行尾</li>\r\n<li>v + hjkl + d：删除选定内容</li>\r\n</ol></li>\r\n<li>复制 &amp; 粘贴\r\n<ol type=\"1\">\r\n<li>v + hjkl + y：复制所选内容</li>\r\n<li>p：粘贴</li>\r\n</ol></li>\r\n</ol>\r\n","categories":["Linux","系统编程"]},{"title":"13. gcc编译","url":"/2023/10/11/13-gcc%E7%BC%96%E8%AF%91/","content":"<p>gcc编译分为4步：</p>\r\n<ol type=\"1\">\r\n<li>预处理：将hello.c展开宏、头文件，替换条件编译、删除注释/空行/空白，得到hello.i</li>\r\n<li>编译：对hello.i检查语法规范，得到hello.s</li>\r\n<li>汇编：将hello.s翻译成机器指令，得到hello.o</li>\r\n<li>链接：数据段合并、地址回填</li>\r\n</ol>\r\n<span id=\"more\"></span>\r\n<p>如何编译一个.c/.c++程序？分为以下几步</p>\r\n<ol type=\"1\">\r\n<li>apt install gcc, apt install g++</li>\r\n<li>写一个.c / .c++文件</li>\r\n<li>gcc filename -o outname / g++ filename -o outname\r\n<ul>\r\n<li>-o：重命名输出文件，不然默认就是filename.out</li>\r\n<li>输出文件是一个可执行文件</li>\r\n<li>-g：加了后输出文件可调试</li>\r\n</ul></li>\r\n</ol>\r\n","categories":["Linux","系统编程"]},{"title":"2. 几种重要的凸集-上","url":"/2023/10/05/2-%E5%87%A0%E7%A7%8D%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%B8%E9%9B%86-%E4%B8%8A/","content":"<p>介绍了一个点、空集、超平面、半空间、球、椭球。</p>\r\n<span id=\"more\"></span>\r\n<p><img src=\"1.jpg\" /></p>\r\n<p><img src=\"2.jpg\" /></p>\r\n","categories":["凸优化","学习笔记"]},{"title":"2. 类Unix系统目录","url":"/2023/10/11/2-%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/","content":"<p>/dev：与本机设备（比如鼠标）有关的目录</p>\r\n<span id=\"more\"></span>\r\n<p>/etc：配置文件信息</p>\r\n<p>/hone：用户目录</p>\r\n<p>/lib：库目录（比如C库、python库）</p>\r\n<p>/media、/mnt：磁盘挂载目录</p>\r\n<p>/opt、/proc：进程目录</p>\r\n<p>/usr：Unix Software Resource，软件目录，比如第三方安装的qq</p>\r\n<p>/bin：存放二进制可执行文件</p>\r\n<p>/boot：存放开机启动程序</p>\r\n","categories":["Linux","系统编程"]},{"title":"3. 几种重要的凸集-下","url":"/2023/10/05/3-%E5%87%A0%E7%A7%8D%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%B8%E9%9B%86-%E4%B8%8B/","content":"<p>介绍了多面体、单纯形、多面体与单纯形的关系、对称矩阵集合、对称半正定矩阵集合、对称正定矩阵集合。</p>\r\n<span id=\"more\"></span>\r\n<p><img src=\"1.jpg\" /></p>\r\n<p><img src=\"2.jpg\" /></p>\r\n","categories":["凸优化","学习笔记"]},{"title":"3. 目录和文件操作1","url":"/2023/10/11/3-%E7%9B%AE%E5%BD%95%E5%92%8C%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C1/","content":"<p>Linux系统类型：</p>\r\n<ol type=\"1\">\r\n<li>普通文件：-</li>\r\n<li>目录问价：d</li>\r\n<li>字符设备文件：c</li>\r\n<li>块设备文件：b</li>\r\n<li>软链接：l</li>\r\n<li>管道文件：p</li>\r\n<li>套接字：s</li>\r\n</ol>\r\n<span id=\"more\"></span>\r\n<p>mkdir：创建文件夹</p>\r\n<p>rm：删除，-r删除文件夹</p>\r\n<p>touch：创建文件</p>\r\n<p>cp：拷贝（cp A B：把A拷贝到B中）（拷贝文件夹要加参数-r）</p>\r\n<p>ls：-l详细细心，-h以human形式展现，可以看大小。（l：ls的简写，ll：ls\r\n-l的简写）</p>\r\n<p>file 文件名：Linux文件名很不规范，没有后缀名这种说法。有时候ls\r\n-l看到的信息比较缺乏（比如文本文件和压缩包在ls\r\n-l下都显示为-），所以使用file 文件名就可以知道这个文件的真面目。</p>\r\n","categories":["Linux","系统编程"]},{"title":"4. 目录和文件操作2","url":"/2023/10/11/4-%E7%9B%AE%E5%BD%95%E5%92%8C%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C2/","content":"<p>cat：查看文件内容</p>\r\n<p>tac：倒着查看文件内容</p>\r\n<p>more：查看大文件，逐屏显示</p>\r\n<p>head：显示前面内容</p>\r\n<p>tail：显示后面内容</p>\r\n<p>tree：以树的形式展示当前目录（需要snap install tree）</p>\r\n<span id=\"more\"></span>\r\n<p>软链接：ln -s 原文件path\r\n链接名字（相当于win的快捷方式）（本质就是链接存储的是原文件的path，所以一般写绝对路径）（有效的软链接高亮是蓝色，无效的是红色的）</p>\r\n<p>硬链接：ln 原文件path\r\n链接名字（本质是原文件与新文件同步，铁索连环的效果）</p>\r\n","categories":["Linux","系统编程"]},{"title":"5. 用户和用户组","url":"/2023/10/11/5-%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84/","content":"<p>chmod：修改文件权限，chmod u/g/o/a +/- r/w/x 文件名，或者chmod 471\r\n文件名，471分别是3个3位二进制数的十进制</p>\r\n<p>chown 新所有者 文件名：修改文件所有者</p>\r\n<p>chgrp 新组 文件名：修改文件所属组</p>\r\n<span id=\"more\"></span>\r\n<p>adduser 用户名：添加用户</p>\r\n<p>deluser 用户名：删除用户</p>\r\n<p>addgroup 组名：添加组名</p>\r\n<p>delgroup 组名：删除组</p>\r\n","categories":["Linux","系统编程"]},{"title":"6. find命令","url":"/2023/10/11/6-find%E5%91%BD%E4%BB%A4/","content":"<ul>\r\n<li>按文件名搜索：\r\n<ul>\r\n<li>find -name '名字'（可加参数-maxdepth num来限定深度）</li>\r\n</ul></li>\r\n<li>按文件类型搜索：\r\n<ul>\r\n<li>find -type 类型（可加参数-maxdepth num来限定深度）</li>\r\n</ul></li>\r\n<li>按文件大小搜索\r\n<ul>\r\n<li>find -size +/-数字M（可加-maxdepth）</li>\r\n</ul></li>\r\n</ul>\r\n<span id=\"more\"></span>\r\n<ul>\r\n<li>find + -exec组合技：\r\n<ul>\r\n<li>例如find ...... -exec ls -l {} ;</li>\r\n<li>{}里就代表着find ......，意思就是说把find到的东西用ls\r\n-l执行，;是固定搭配</li>\r\n<li>或者find ...... -exec rm -r {} ;</li>\r\n</ul></li>\r\n<li>find + | + xargs组合技：\r\n<ul>\r\n<li>例如find ... ... | xargs ls -l\r\n（但是这种方式缺点就是文件名有空格时会出错，在|前加-print0可避免这个错误）</li>\r\n<li>xrags就是把|管道接收到的东西切割成一块块的给后面</li>\r\n</ul></li>\r\n</ul>\r\n","categories":["Linux","系统编程"]},{"title":"7. grep和xargs","url":"/2023/10/11/7-grep%E5%92%8Cxargs/","content":"<p>grep 内容 查找path [-r]：找内容所在的path，如果path是文件夹就加-r</p>\r\n<span id=\"more\"></span>\r\n<p>ps：查看所有进程（一般使用ps aux查看所有进程，a=all, u=user,\r\nx=没有控制终端的进程）</p>\r\n<ul>\r\n<li><div class=\"line-block\">+ grep组合技</div>\r\n<ul>\r\n<li>例：ps aux | grep 'copy'：查看进程中有copy内容的进程</li>\r\n<li>例：cat tmp.txt | grep 'copy'\r\n-n：查看tmp.txt有copy的那一行并显示行号</li>\r\n<li>例：ls -l /usr/bin | grep 'mkdir' -n：查看 ls -l\r\n/usr/bin中带有mkdir的那一行并显示行号</li>\r\n</ul></li>\r\n<li>xargs：可以和find ...... + | + xargs +\r\nls组合组合技，具体看上一篇blog</li>\r\n</ul>\r\n","categories":["Linux","系统编程"]},{"title":"9. 压缩和解压","url":"/2023/10/11/9-%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B/","content":"<p>压缩：tar -zcvf 生成的压缩包名 压缩材料（多个材料用空格分隔）</p>\r\n<p>解压 ：tar -zxvf 压缩包名</p>\r\n<span id=\"more\"></span>\r\n<p>Linux下使用rar解压缩也是可以的。但是要先apt install rar/unrar。</p>\r\n<p>rar压缩：rar a -r 生成的压缩包名 压缩材料</p>\r\n<p>rar解压：unrar x 压缩包名</p>\r\n<p>Linux下也是可以使用zip解压缩的。但是要先apt install zip/unzip。</p>\r\n<p>zip压缩：zip -r 生成的压缩包名 压缩材料</p>\r\n<p>zip解压：unzip 解锁包名</p>\r\n","categories":["Linux","系统编程"]},{"title":"8. 软件包安装","url":"/2023/10/11/8-%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%AE%89%E8%A3%85/","content":"<p>apt update是重新拉去目标源的资源列表。所以一般apt\r\ninstall找不到的话，先重新拉取一下列表先。</p>\r\n<p>apt upgrade是根据本地资源列表更新所有软件包。</p>\r\n<p>aptitude show\r\n软件包名：查看软件包是否安装，若安装，显示相关信息（需要先apt install\r\naptitude）（aptitude ≈ apt ≈ apt-get）</p>\r\n<span id=\"more\"></span>\r\n<p>apt install 软件名：安装</p>\r\n<p>apt remove 软件名：卸载</p>\r\n<p>离线安装也可以，先下载安装包，Ubuntu的安装包后缀是.deb。</p>\r\n<p>安装deb软件包命令：dpkg -i xxx.deb</p>\r\n<p>卸载软件包：也用apt remove</p>\r\n<p>还有一种方式是源码安装，也就是别人给你软件的代码，你需要自己在本机上编译。这种方式的一般流程是：</p>\r\n<ol type=\"1\">\r\n<li>解压源代码包</li>\r\n<li>cd dir（源代码包）</li>\r\n<li>运行./configure（这一步是检测文件是否缺失以及创建Makefile以及检测编译环境）</li>\r\n<li>运行make（这一步是在编译源码、生成库和可执行程序）</li>\r\n<li>运行make install（这一步是把库和可执行程序安装到系统路径下）</li>\r\n<li>删除和卸载软件：运行make distclean</li>\r\n</ol>\r\n","categories":["Linux","系统编程"]},{"title":"个人博客搭建说明","url":"/2023/10/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AF%B4%E6%98%8E/","content":"<p>使用GitHub + Hexo搭建的本博客。</p>\r\n<p>教程参考<a\r\nhref=\"https://zhuanlan.zhihu.com/p/102592286\">从零开始搭建个人博客（超详细）\r\n- 知乎 (zhihu.com)</a>。</p>\r\n<p>上面这篇文章可以说是从0到1很详细的介绍了搭建个人博客的全流程，不过仍然有许多小错误，需要结合评论区和其它博文一起阅读才会避免踩坑。</p>\r\n<span id=\"more\"></span>\r\n<p>我大致总结一下流程：</p>\r\n<ol type=\"1\">\r\n<li>注册GitHub</li>\r\n<li>下载Git并将Git绑定到GitHub（使用token）</li>\r\n<li>购买域名</li>\r\n<li>安装node.js并配置环境变量（建议全程使用cmd管理员而不是git\r\nbash）</li>\r\n<li>安装hexo</li>\r\n<li>解析域名</li>\r\n<li>设置并美化主题</li>\r\n</ol>\r\n<p>另外，博客首页的头像是用的GitHub的头像链接，另外我不打算采用图床，因为怕翻车。所以文章里的全部图片都是存储在本地并push到GitHub中，若加载不出或速度慢可以尝试挂个梯子。</p>\r\n<p>域名第一年花了9块，之后续费好像是20多块一年。在阿里云买的。</p>\r\n<p>看板娘参考了两篇文章：<a\r\nhref=\"https://github.com/stevenjoezhang/live2d-widget\">设置看板娘</a>,\r\n<a\r\nhref=\"https://www.cnblogs.com/c10udlnk/p/14727173.html\">个性化配置看板娘</a>。</p>\r\n<p>但是live2d的模型默认的这几个我不是很熟悉，以后有空了想换成我自己喜欢的人物角色。</p>\r\n","categories":["杂项"]},{"title":"在VS Code中配置C/C++","url":"/2023/10/03/%E5%9C%A8VS-Code%E4%B8%AD%E9%85%8D%E7%BD%AEC-C/","content":"<p>之前因为学了一点html，所以下了一个VS Code来写html代码。</p>\r\n<p>今天要写C++的代码，以前都是用VS写的。但是突然想了一下既然都装了VS\r\nCode，为啥不配置一下。配置好了后以后写C/C++代码也不用打开繁重的VS了。而且VS\r\nCode还能加很多插件。</p>\r\n<span id=\"more\"></span>\r\n<p>说干就干，上网找了资料，终于配置好了。还是有蛮多坑的，主要是因为网上的教程大部分版本比较老了。所以我来写个教程，方便别人和以后自己在别的电脑上配置。我总结出以下几步：</p>\r\n<h3 id=\"下载mingw-w64并配置系统变量\">1. 下载MinGW-w64并配置系统变量</h3>\r\n<ul>\r\n<li><p>MinGW是是将经典的开源 C语言 编译器 GCC 移植到了 Windows\r\n平台下，并且包含了 Win32API ，因此可以将源代码编译为可在 Windows\r\n中运行的可执行程序。</p></li>\r\n<li><p>但是MinGW的很早就停止维护了，版本很老了。</p></li>\r\n<li><p>MinGW-w64相当于升级版的MinGW，是一个开源项目，不断在更新维护着。</p></li>\r\n<li><p><a\r\nhref=\"https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/\">下载链接</a>，划到最下面，选择“MinGW-W64\r\nGCC-8.1.0”下的“x86_64-win32-seh”进行下载。</p></li>\r\n<li><p>下载好后，解压到自己想要的位置。然后将其中的bin路径配置到系统变量中。</p></li>\r\n<li><p>打开cmd，输入gcc --version和gdb\r\n--version，弹出版本信息就说明这一步完成了。</p></li>\r\n</ul>\r\n<h3 id=\"下载插件cccode-runner\">2. 下载插件C/C++，Code Runner</h3>\r\n<ul>\r\n<li>在VS Code中下载即可。</li>\r\n</ul>\r\n<h3 id=\"配置文件\">3. 配置文件</h3>\r\n<ul>\r\n<li><p>新建一个项目文件夹，在下面建立一个.vscode文件夹，下面建立三个文件，launch.json，tasks.json，c_cpp_properties.json，然后依次把我的代码复制进去。注意代码中的“（改为自己的路径）”</p></li>\r\n<li><p>lauch.json</p></li>\r\n</ul>\r\n<p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C++ Launch (GDB)&quot;</span><span class=\"punctuation\">,</span>                </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppdbg&quot;</span><span class=\"punctuation\">,</span>                         </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span>                        </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;targetArchitecture&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;x86&quot;</span><span class=\"punctuation\">,</span>                </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span>                 </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;miDebuggerPath&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;D:\\\\app\\\\mingw64\\\\bin\\\\gdb.exe&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span>     </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;stopAtEntry&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span>                  </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class=\"punctuation\">,</span>                  </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;externalConsole&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span>                  </span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;preLaunchTask&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;D:/app/mingw64/bin/g++.exe&quot;</span>  （改为自己的路径）          </span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li>tasks.json</li>\r\n</ul>\r\n<p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;D:/app/mingw64/bin/g++.exe&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">    <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;-g&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;-std=c++11&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;$&#123;file&#125;&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;-o&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;problemMatcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;owner&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cpp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;fileLocation&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;relative&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;pattern&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;regexp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;severity&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;D:/app/mingw64/bin/g++.exe&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">            <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;D:/app/mingw64/bin/g++.exe&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-std=c++11&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;file&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;problemMatcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;owner&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cpp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;fileLocation&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;relative&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;$&#123;workspaceRoot&#125;&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;pattern&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;regexp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;file&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;line&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;column&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;severity&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;group&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;isDefault&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li>c_cpp_properties.json</li>\r\n</ul>\r\n<p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Win32&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;includePath&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">                <span class=\"string\">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">                <span class=\"string\">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">                <span class=\"string\">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">                <span class=\"string\">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include//c++/tr1&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">                <span class=\"string\">&quot;D:/app/mingw64/x86_64-w64-mingw32/include&quot;</span>（改为自己的路径）</span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;defines&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;_DEBUG&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;UNICODE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;__GNUC__=6&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;__cdecl=__attribute__((__cdecl__))&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;intelliSenseMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;msvc-x64&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;browse&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">                    <span class=\"string\">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">                    <span class=\"string\">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">                    <span class=\"string\">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">                    <span class=\"string\">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include//c++/tr1&quot;</span><span class=\"punctuation\">,</span>  （改为自己的路径）</span><br><span class=\"line\">                    <span class=\"string\">&quot;D:/app/mingw64/x86_64-w64-mingw32/include&quot;</span>  （改为自己的路径）</span><br><span class=\"line\">                <span class=\"punctuation\">]</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;compilerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Professional\\\\VC\\\\Tools\\\\MSVC\\\\14.36.32532\\\\bin\\\\Hostx64\\\\x64\\\\cl.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;cStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c17&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;cppStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c++17&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li><p>在项目文件夹中新建cpp文件，随便写一个程序。然后F5调试。</p></li>\r\n<li><p>如果能输出正确结果就没问题。如果不能，比如std或者cout报错的话，就打开设置，在\"C/C++\"中找到C_Cpp:intelli\r\nSense Engine，将默认的“Default”改为“Tag Parser”。</p></li>\r\n<li><p>此时按F5就可以正常实现调试功能了。</p></li>\r\n<li><p>其实如果你不用调试的话，直接Ctrl + F5用Code\r\nRunner跑代码就行了。</p></li>\r\n</ul>\r\n","categories":["杂项"]},{"title":"数字逻辑自学笔记","url":"/2023/10/06/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/","content":"<p>写于2023/10/6，这门课其实还是有点意思的。但是上个月身体原因一直在关心我自己的身体，所以这门课我全翘掉了，一点没听。现在马上就要实验课了，于是打算在国庆的末尾把这门课学了。目的是能做出几个组合逻辑电路的实验项目。</p>\r\n<p>自学参考的内容为老师ppt、各种网上博客。</p>\r\n<p>学完后打算去刷题巩固一下，刷题打算在一个up主视频里刷：<a\r\nhref=\"https://www.bilibili.com/video/BV1H54y1k7kM?p=1&amp;vd_source=2501060da9b4bef86e2b8ec8a8d880b5\">传送门</a></p>\r\n<p>最后，如果有朋友打算认真看这篇Blog进行学习的话，为了更好的阅读体验建议开梯子，因为本文有许多图片和一个视频。（存储在github中）</p>\r\n<span id=\"more\"></span>\r\n<p>先放一张各种门的符号图，后面忘了的话可以参考：</p>\r\n<p><img src=\"1.png\" /></p>\r\n<p><img src=\"2.png\" /></p>\r\n<h3 id=\"一.-组合逻辑电路1\">一. 组合逻辑电路(1)</h3>\r\n<h4 id=\"概述\">1.1. 概述</h4>\r\n<p>电路分为组合逻辑电路和时序逻辑电路。差别就是组合逻辑电路无记忆功能，时序逻辑电路有。</p>\r\n<p>描述电路的逻辑功能有以下几种形式：</p>\r\n<ol type=\"1\">\r\n<li>语言描述</li>\r\n<li>电路图</li>\r\n<li>逻辑表达式，即y = f(a1, a2, a3, ..., an)</li>\r\n<li>真值表</li>\r\n<li>卡诺图</li>\r\n<li>波形图</li>\r\n</ol>\r\n<h4 id=\"组合逻辑电路的分析-和-逻辑函数的设计方法\">1.2.\r\n组合逻辑电路的分析 和 逻辑函数的设计方法</h4>\r\n<ul>\r\n<li><p><strong>分析</strong>：</p>\r\n<ul>\r\n<li><p>即给你一个电路，让你告诉我这个电路是干啥用的。</p></li>\r\n<li><p>分析一个组合逻辑电路的固定套路很简单：</p>\r\n<ol type=\"1\">\r\n<li>一层一层写出逻辑表达式</li>\r\n<li>对最后得到的逻辑表达式进行化简\r\n<ul>\r\n<li>化简手段1：卡诺图</li>\r\n<li>化简手段2：<span class=\"math inline\">\\(A + A \\cdot B = A 或 A \\cdot\r\n(A + B) = A\\)</span></li>\r\n<li>化简手段3：<span class=\"math inline\">\\(A + \\overline{A}B = A + B 或\r\nA \\cdot (\\overline{A} + B) = A \\cdot B\\)</span></li>\r\n<li>化简手段4：<span class=\"math inline\">\\(\\overline{A}\\overline{C} +\r\nA\\overline{B} + \\overline{B}\\overline{C} = \\overline{A}\\overline{C} +\r\nA\\overline{B}\\)</span>（对于<span\r\nclass=\"math inline\">\\(\\overline{B}\\overline{C}\\)</span>添项即可证明）</li>\r\n<li>化简手段5：<span class=\"math inline\">\\(A \\oplus B = \\overline{A}B +\r\nA\\overline{B}\\)</span></li>\r\n<li>化简手段6：<span class=\"math inline\">\\(A \\odot B = (\\overline{A} +\r\nB)(A + \\overline{B})\\)</span></li>\r\n</ul></li>\r\n<li>对化简后的逻辑表达式列真值表，观察真值表，观察出此电路的功能</li>\r\n</ol></li>\r\n<li><p>例子：</p>\r\n<p><img src=\"3.png\" /></p>\r\n<ul>\r\n<li>T1是个与门，T2是个或门，第一层剩下都是与门，第二层一个或门，第三层一个非门，第四层一个与门，最后一层一个或门。最后通过真值表很容易看出ABC三个输入变量但有两个输出变量。不难想到是一个全加器。A、B是两个加数，C是上一位的进位，F1是当前位，F2是进位。</li>\r\n<li>还有许多功能电路啦...\r\n...比如半加器（2输入2输出）、投票表决器（多输入1输出）、奇校验电路（多输入1输出）、一致性电路（多输入1输出）</li>\r\n</ul></li>\r\n</ul></li>\r\n<li><p><strong>设计</strong>：</p>\r\n<ul>\r\n<li><p>告诉你一个功能，让你设计出一个电路来实现它。</p></li>\r\n<li><p>也是有固定套路的：</p>\r\n<ol type=\"1\">\r\n<li><p>分析功能，确定输入输出变量</p>\r\n<ul>\r\n<li>确定输入输出变量还是有点讲究的，有时候设计的好了可以大大减少运算量和电路的复杂程度。比如下面两个功能，换做是你，你会怎样设计？</li>\r\n</ul>\r\n<p><img src=\"4.png\" /> <img src=\"5.png\" /></p>\r\n<ul>\r\n<li>设计的关键其实是做到尽可能的<strong>复用</strong>，即对于不同对象的同一属性，尽量用一个变量表达出来。</li>\r\n</ul></li>\r\n<li><p>根据题意，直接构造出电路。或者写出真值表然后写出主析取范式然后再用卡诺图化简后得到最终逻辑表达式</p></li>\r\n<li><p>根据逻辑表达式，选取一种门电路，画出电路图</p></li>\r\n</ol></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h3 id=\"二.-组合逻辑电路2\">二. 组合逻辑电路(2)</h3>\r\n<p>上一节我们已经可以设计出逻辑表达式。但是具体选用哪一种门电路呢？每一种门电路应该如何设计呢？这一节我们就来学习。</p>\r\n<h4 id=\"单输出电路设计\">2.1. 单输出电路设计</h4>\r\n<h5 id=\"用与非门设计电路\">2.1.1. 用与非门设计电路</h5>\r\n<p>对于逻辑表达式F = ...中的 + 全部换成 <span\r\nclass=\"math inline\">\\(\\cdot\\)</span> 就好了，按照这个思路，只要在 +\r\n的头上画两根取反号就行了，最上面那根保留，下面那根负责把 + 换成 <span\r\nclass=\"math inline\">\\(\\cdot\\)</span> 。</p>\r\n<p>但这样得到的实际电路可能耗材过多，实际中有些式子通过观察还能发现可以化的更简，比如下面这个例子：</p>\r\n<p><span class=\"math inline\">\\(F = A\\overline{B} + B\\overline{C} +\r\nC\\overline{D} + D\\overline{A} = \\overline{\\overline{A\\overline{B}} \\cdot\r\n\\overline{B\\overline{C}} \\cdot \\overline{C\\overline{D}} \\cdot\r\n\\overline{D\\overline{A}}}\\)</span></p>\r\n<p>按理说这样就好了，但是还可以化简的。</p>\r\n<p><span class=\"math inline\">\\(\\overline{A\\overline{B}} \\cdot\r\n\\overline{B\\overline{C}} \\cdot \\overline{C\\overline{D}} \\cdot\r\n\\overline{D\\overline{A}} = (\\overline{A} + B)(\\overline{B} +\r\nC)(\\overline{C} + D)(\\overline{D} + A)\\)</span></p>\r\n<p>上面这个东西，学过二项式定理吗？假如我第一项如果挑B，则第二项不能挑<span\r\nclass=\"math inline\">\\(\\overline{B}\\)</span>，只能挑C，那么第三项也只能挑D，依次类推，第四项只能挑A，得到ABCD。同理，如果我第一项挑<span\r\nclass=\"math inline\">\\(\\overline{A}\\)</span>，那么我只能得到<span\r\nclass=\"math inline\">\\(\\overline{A}\\overline{B}\\overline{C}\\overline{D}\\)</span>。</p>\r\n<p>即：<span class=\"math inline\">\\((\\overline{A} + B)(\\overline{B} +\r\nC)(\\overline{C} + D)(\\overline{D} + A) = ABCD +\r\n\\overline{A}\\overline{B}\\overline{C}\\overline{D}\\)</span></p>\r\n<p>对上面那玩意再求两次反，得到<span\r\nclass=\"math inline\">\\(\\overline{\\overline{ABCD} \\cdot\r\n\\overline{\\overline{A}\\overline{B}\\overline{C}\\overline{D}}}\\)</span></p>\r\n<p>这样子，就得到<span class=\"math inline\">\\(F =\r\n\\overline{\\overline{\\overline{ABCD} \\cdot\r\n\\overline{\\overline{A}\\overline{B}\\overline{C}\\overline{D}}}}\\)</span></p>\r\n<p>总结下来这个第二种方法就是在第一种方法的基础上把内部通过二项式定理进一步化简。</p>\r\n<h5 id=\"用或非门设计电路\">2.1.2. 用或非门设计电路</h5>\r\n<p>对于逻辑表达式F = ...中的 <span class=\"math inline\">\\(\\cdot\\)</span>\r\n全部换成 + 就好了，按照这个思路，只要在 <span\r\nclass=\"math inline\">\\(\\cdot\\)</span>\r\n的头上画两根取反号就行了，最上面那根保留，下面那根负责把 <span\r\nclass=\"math inline\">\\(\\cdot\\)</span> 换成 + 。</p>\r\n<p>还有第二种通用的方法，就是将F先求对偶，得到<span\r\nclass=\"math inline\">\\(F_d\\)</span>，这样F就由(xxx) + (xxx) +\r\n(xxx)的形式变为(x + x)(x + x)(x +\r\nx)的形式了。学过二项式定理吗？同理将<span\r\nclass=\"math inline\">\\(F_d\\)</span>化简，得到最简“与-或”式(yyy) +\r\n(yyy)。再在头上加两根取反，最顶上保留，下面那根为了把 + 变成 <span\r\nclass=\"math inline\">\\(\\cdot\\)</span> ，最后再对偶回去即可。</p>\r\n<p>上面那段文字是具体过程，流程总结下来如下：</p>\r\n<ol type=\"1\">\r\n<li>对F求对偶<span class=\"math inline\">\\(F_d\\)</span></li>\r\n<li>对<span\r\nclass=\"math inline\">\\(F_d\\)</span>展开，利用二项式原理或者卡诺图，得到最简\"与-或\"式<span\r\nclass=\"math inline\">\\(F_d&#39;\\)</span></li>\r\n<li>对<span\r\nclass=\"math inline\">\\(F_d&#39;\\)</span>取两次反，最上面保留，下面那根化开，得到<span\r\nclass=\"math inline\">\\(F_d&#39;&#39;\\)</span></li>\r\n<li>对<span class=\"math inline\">\\(F_d&#39;&#39;\\)</span>对偶回去</li>\r\n</ol>\r\n<h5 id=\"用与或非门设计电路\">2.1.3. 用与或非门设计电路</h5>\r\n<p>这个就更简单了，因为给出的函数表达式都是形如F = xyz + xyz +\r\nxyz，所以只需要在F头上加两条杠就好了。</p>\r\n<p>第二种思路就是跟用与非门设计电路的第二种方法一样。加两条杠，最上面不动，下面那个把xyz\r\n+ xyz +\r\nxyz变成()()()型，然后二项式定理展开即可。（如果是与非门第二种设计思路还要将展开的东西再取两次反）</p>\r\n<h4 id=\"多输出电路设计\">2.2. 多输出电路设计</h4>\r\n<p>啊，最直接的想法就是分别把每个输出对应的电路设计出来就好了。但是这样比较憨，当我们化简得到了每个输出对应的逻辑表达式的时候，我们应该能尽可能使每一项<strong>复用</strong>。看下面这个例子：</p>\r\n<p><img src=\"6.png\" /></p>\r\n<p>可以发现原<span class=\"math inline\">\\(F_1\\)</span>中的<span\r\nclass=\"math inline\">\\(A\\overline{B}\\)</span>可以变成<span\r\nclass=\"math inline\">\\(A\\overline{B}\\overline{C}\\)</span>，这样就跟<span\r\nclass=\"math inline\">\\(F_2\\)</span>中的<span\r\nclass=\"math inline\">\\(A\\overline{B}\\overline{C}\\)</span>一样了，做到了复用。</p>\r\n<h4 id=\"包含无关项的电路设计\">2.3. 包含无关项的电路设计</h4>\r\n<p>其实很简单，看下面这个例子就懂了。</p>\r\n<p><img src=\"7.png\" /></p>\r\n<p><img src=\"8.png\" /></p>\r\n<p>首先我们知道余3码是在8421码的基础上+3得到，因为8421码只有10位，所以余3码也只有10位。而且8421码最小是0000，所以余3码最小是0011（对应十进制数1）。所以这就在输出F中产生了许多无关项d。在画卡诺图时，若不考虑无关项，则把d全置为0；考虑无关项则把d全置为1。最后得到化简后的函数表达式。然后再将这个函数表达式用与非门设计。</p>\r\n<h4 id=\"考虑级数的电路设计\">2.4. 考虑级数的电路设计</h4>\r\n<p>也是看一道例题就可以理解了。</p>\r\n<p><img src=\"9.png\" /></p>\r\n<p>先用最直接的方法，与或非门直接加两条杠结束。与非门直接加两条杠，下面那条杠化开结束。</p>\r\n<p>但是这样设计级数会不会多呢？</p>\r\n<p>如果我们用\"与或非门设计电路\"中第二种化简方法，试一下：</p>\r\n<p><span class=\"math inline\">\\(F = \\overline{\\overline{AB +\r\n\\overline{A}C}} = \\overline{\\overline{AB} \\cdot\r\n\\overline{\\overline{A}C}} = \\overline{(\\overline{A} + \\overline{B})(A +\r\n\\overline{C})} = \\overline{\\overline{A}\\overline{C} + A\\overline{B} +\r\n\\overline{B}\\overline{C}} = \\overline{\\overline{A}\\overline{C} +\r\nA\\overline{B}}\\)</span></p>\r\n<p>可以发现，这样设计只有3层。但是原来那样直接加两条杠是4层。所以当考虑电路的级数时，在用与或非门设计电路时，可以考虑进一步化简优化电路的级数。</p>\r\n<p>如果用与非门，就不需要考虑进一步化简了。因为在与非门进一步化简后，还需要再内部再添加两条杠。级数肯定比不继续化简多。</p>\r\n<h4 id=\"综合题\">2.5. 综合题</h4>\r\n<ul>\r\n<li>设计一个组合电路，将8421BCD码变换为余3码。</li>\r\n</ul>\r\n<p>先确定输入输出变量，因为8421BCD码是用四个二进制数表示十进制数0~9，所以有四个输入A、B、C、D代表四个二进制数。同理四个输出W、X、Y、Z代表变换后的余3码。</p>\r\n<p>然后列出真值表，因为BCD只能表示十进制0~9，所以注意表中有无关项d。</p>\r\n<p><img src=\"10.png\" /></p>\r\n<p>这里不考虑无关项，所以在后续画卡诺图时都将d置为0。</p>\r\n<p>因为是四个输出，所以属于多输出电路。所以先画四个卡诺图得到四个逻辑表达式（其实对于Z，发现其很有规律不用画卡诺图都可以知道它就是<span\r\nclass=\"math inline\">\\(\\overline{D}\\)</span>）</p>\r\n<p>画卡诺图过程省略，得到四个逻辑表达式： <span class=\"math display\">\\[\r\nW = A + BC + BD \\\\\r\nX = \\overline{B}C + \\overline{B}D + B\\overline{C}\\overline{D} \\\\\r\nY = CD + \\overline{C}\\overline{D} \\\\\r\nZ = \\overline{D}\r\n\\]</span>\r\n此时我们需要思考，是否能做到项的<strong>复用</strong>呢？乍一看没发现能复用的，所以先不考虑复用，继续将式子进一步化简先。先从简单的开始画：</p>\r\n<p><span class=\"math inline\">\\(Z = \\overline{D}\\)</span></p>\r\n<p><span class=\"math inline\">\\(Y = \\overline{C} \\oplus D\\)</span></p>\r\n<p><span class=\"math inline\">\\(X = \\overline{B}(C + D) + B\\overline{(C +\r\nD)} = B \\oplus (C + D) = B \\oplus\r\n\\overline{\\overline{C}\\overline{D}}\\)</span></p>\r\n<p><span class=\"math inline\">\\(W = A + B(C + D) = A +\r\nB\\overline{\\overline{C}\\overline{D}}\\)</span></p>\r\n<p>化简后可以发现，<span\r\nclass=\"math inline\">\\(\\overline{\\overline{C}\\overline{D}}\\)</span>这个东西可以做到复用，真不错。</p>\r\n<p>接下来就是选择门电路来设计电路了。这里我选择最常用的与非门 +\r\n异或门设计电路。根据上面的逻辑表达式直接设计即可（W还需化简一下：<span\r\nclass=\"math inline\">\\(W = \\overline{\\overline{A} \\cdot\r\n\\overline{B\\overline{\\overline{C}\\overline{D}}}}\\)</span>）</p>\r\n<p>最后画出电路：</p>\r\n<p><img src=\"11.png\" /></p>\r\n<hr />\r\n<h3 id=\"三.-组合逻辑电路3\">三. 组合逻辑电路(3)</h3>\r\n<h4 id=\"编码器\">3.1 编码器</h4>\r\n<p>按照我的理解，就是把数字变成二进制数。比如把0 ~\r\n8变成3位二进制数，或者0 ~ 15变成4位二进制数。</p>\r\n<p>编码器分为普通编码器 和 优先编码器。</p>\r\n<ul>\r\n<li><strong>普通编码器</strong></li>\r\n</ul>\r\n<p>特点：任何时刻只允许输入一个编码信号。</p>\r\n<p>最常见的普通编码器为8线-3线编码器，如下图：</p>\r\n<p><img src=\"12.png\" /></p>\r\n<p>它的真值表如下：</p>\r\n<p><img src=\"13.png\" /></p>\r\n<p>可以看出，假如我<span\r\nclass=\"math inline\">\\(I_7\\)</span>为高电平，则输出111，就是7的二进制。</p>\r\n<p>那内部电路如何设计呢？根据真值表得出逻辑表达式然后化简，再选用与非门实现即可。</p>\r\n<p>上面这个是8线-3线普通编码器，那如何实现8421-BCD普通编码器呢？</p>\r\n<p>很简单，10个输入，4个输出。列出真值表，发现会有无关项。不考虑无关项，根据真值表得出4个输出的逻辑表达式，然后根据卡诺图化简。最后选用与非门实现即可。</p>\r\n<ul>\r\n<li><strong>优先编码器</strong></li>\r\n</ul>\r\n<p>特点：允许同时输入多个编码信号，只对其中优先权最高的一个进行编码。</p>\r\n<p>最常见的优先编码器是74148优先编码器，长下面这个样子，需要掌握：</p>\r\n<p><img src=\"14.png\" /></p>\r\n<p>这个图有两个要注意的地方，首先就是所有的<span\r\nclass=\"math inline\">\\(I\\)</span>上面都是有一个取反号的，只是这个图比较小可能看不清晰，然后所有的<span\r\nclass=\"math inline\">\\(Y、S\\)</span>上面也有取反号。还有就是看到红色箭头的地方了吗？这跟前面的8线-3线普通编码器不一样，这代表低电平有效。</p>\r\n<p><span\r\nclass=\"math inline\">\\(\\overline{S}\\)</span>为选通输入端，只有当<span\r\nclass=\"math inline\">\\(\\overline{S} = 0\\)</span>时才能正常工作，当<span\r\nclass=\"math inline\">\\(\\overline{S} =\r\n1\\)</span>时所有输出端为封锁为高电平。</p>\r\n<p>​ <img src=\"15.png\" /></p>\r\n<p><span\r\nclass=\"math inline\">\\(\\overline{Y_s}\\)</span>为选通输出端，当<span\r\nclass=\"math inline\">\\(\\overline{Y_s} =\r\n0\\)</span>说明电路正常工作且无编码信号输入（<span\r\nclass=\"math inline\">\\(\\overline{S} = 0 且所有\\overline{I} =\r\n1\\)</span>）</p>\r\n<p>​ <img src=\"16.png\" /></p>\r\n<p><span\r\nclass=\"math inline\">\\(\\overline{Y_{EX}}\\)</span>为扩展端，当<span\r\nclass=\"math inline\">\\(\\overline{Y_{EX}} =\r\n0\\)</span>说明电路正常工作且有编码信号输入（<span\r\nclass=\"math inline\">\\(\\overline{S} = 0\\)</span>且存在<span\r\nclass=\"math inline\">\\(\\overline{I} = 0\\)</span>）</p>\r\n<p>​ <img src=\"17.png\" /></p>\r\n<p>知道了每个端口的作用，如何只通过输出端判断此时编码器处于什么状态呢？</p>\r\n<ol type=\"1\">\r\n<li><span class=\"math inline\">\\(\\overline{Y_s} =\r\n0\\)</span>：电路正常工作且无编码信号输入。（此时<span\r\nclass=\"math inline\">\\(\\overline{Y_{EX}}\\)</span>必为1）</li>\r\n<li><span class=\"math inline\">\\(\\overline{Y_{EX}} =\r\n0\\)</span>：电路正常工作且有编码信号输入。（此时<span\r\nclass=\"math inline\">\\(\\overline{Y_s}\\)</span>必为1）</li>\r\n<li><span class=\"math inline\">\\(\\overline{Y_s} = \\overline{Y_{EX}} =\r\n1\\)</span>：电路被阻塞（此时<span\r\nclass=\"math inline\">\\(\\overline{S}\\)</span>必为1）</li>\r\n</ol>\r\n<p>最后，74148优先编码器的真值表贴上来，上面所有可能你觉得有困惑的点都可以在这张表中得到解答。</p>\r\n<p><img src=\"18.png\" /></p>\r\n<ul>\r\n<li><strong>练习</strong></li>\r\n</ul>\r\n<p>学了上面普通编码器和优先编码器的知识，来写一道题吧！</p>\r\n<blockquote>\r\n<p>请用两片74148接成16线-4线优先编码器，将16个低电平输入信号<span\r\nclass=\"math inline\">\\(\\overline{A_0} \\sim\r\n\\overline{A_{15}}\\)</span>编为'0000' ~ '1111'，其中<span\r\nclass=\"math inline\">\\(\\overline{A_{15}}\\)</span>的优先级最高。</p>\r\n</blockquote>\r\n<p>首先如果是0 ~\r\n7就直接用一片就好了。思考一下，如果是大于7怎么办？可以这样思考：</p>\r\n<p>15 = 8 + 7</p>\r\n<p>14 = 8 + 6</p>\r\n<p>13 = 8 + 5</p>\r\n<p>12 = 8 + 4</p>\r\n<p>11 = 8 + 3</p>\r\n<p>10 = 8 + 2</p>\r\n<p>9 = 8 + 1</p>\r\n<p>8 = 8 + 0</p>\r\n<p>发现规律了吗？如果是0 ~ 7直接用一片就好了，如果是8 ~\r\n15就肯定需要用到第二片，但是第二片同样能表达的范围只有0 ~ 7，所以就将8 ~\r\n15进行数字拆分。</p>\r\n<p>如果输入8，则点亮第四位输出（8421中的8），剩下3位二进制输入0</p>\r\n<p>如果输入9，则点亮第四位输出，剩下3位二进制输入1</p>\r\n<p>如果输入10，则点亮第四位输出，剩下3位二进制输入2</p>\r\n<p>... ...</p>\r\n<p>如果输入15，则点亮第四位输出，剩下3位二进制输入7</p>\r\n<p>思路就是这样，还有一些小细节我在放答案过后再解释：</p>\r\n<p><img src=\"19.png\" /></p>\r\n<p>可以看到<span\r\nclass=\"math inline\">\\(G_0、G_1、G_2\\)</span>门都采用了与非门的设计，因为两片74148必定只会用到一片的输出（0\r\n~ 7用右边那片，8 ~ 15用左边那片）。</p>\r\n<p>但是如果使得一片工作另一片就停止工作呢？注意左边那片的<span\r\nclass=\"math inline\">\\(\\overline{Y_s}\\)</span>端口，左边那片正常工作且有信号输入时输出1，使得右边那片<span\r\nclass=\"math inline\">\\(\\overline{S} =\r\n1\\)</span>，所以右边那片直接被堵塞了。如果左边那片正常工作但没信号输入时输出0，使得右边那片被激活。这样就实现了两片中只能有一片在工作。</p>\r\n<p>然后<span\r\nclass=\"math inline\">\\(Z_3\\)</span>就是第四个二进制输出。只要用到左边那片，就输出1。刚好<span\r\nclass=\"math inline\">\\(\\overline{Y_{EX}}\\)</span>就可以实现这个功能，只要电路正常工作并且有信号输入<span\r\nclass=\"math inline\">\\(\\overline{Y_{EX}}\\)</span>就为0，经过一个与非门之后就变成了1。</p>\r\n<h4 id=\"译码器\">3.2 译码器</h4>\r\n<p>译码器就是编码器的逆过程。编码器是给它一个数字，输出二进制。译码器就是给它一个二进制，输出一个数字。</p>\r\n<p>译码器分为二进制译码器（最小项译码器）、二—十进制译码器、显示译码器。其中二进制译码器需要掌握74138译码器。</p>\r\n<ul>\r\n<li><strong>二进制译码器（只讲74138译码器）</strong></li>\r\n</ul>\r\n<p>74138译码器长这个样子：</p>\r\n<p><img src=\"20.png\" /></p>\r\n<p>注意，跟74148解码器不同，这里的三个输入端<span\r\nclass=\"math inline\">\\(A\\)</span>都是高电平有效，输出端<span\r\nclass=\"math inline\">\\(\\overline{Y}\\)</span>是低电平有效。这里的<span\r\nclass=\"math inline\">\\(S、\\overline{S}\\)</span>是控制芯片是否工作的。</p>\r\n<p>具体来说，只有当<span class=\"math inline\">\\(S_1 = 1 且 \\overline{S_2}\r\n=0 且 \\overline{S_3} =\r\n0\\)</span>时，电路才处于正常工作状态。其余情况电路都处于被堵塞的状态。</p>\r\n<p>​ <img src=\"21.png\" /></p>\r\n<p>74138解码器的真值表如下：</p>\r\n<p><img src=\"22.png\" /></p>\r\n<ul>\r\n<li><strong>二—十进制译码器（只讲7442译码器）</strong></li>\r\n</ul>\r\n<p>我觉得二—十进制译码器就是二进制译码器啊...\r\n...搞不懂为啥还要专门分个类出来。二—十译码器就是说将4个二进制数变成十进制0\r\n~ 9。</p>\r\n<p>二—十进制译码器最常见的就是7442译码器，它的真值表如下：</p>\r\n<p><img src=\"23.png\" /></p>\r\n<p>可以看到有伪码的存在，这是为什么呢？因为4个二进制数可以表达0 ~\r\n15，但是因为是BCD码，所以我们得到的数范围是0 ~\r\n9。所以有一部分的二进制状态没有用到，没用到的地方就称为伪码。</p>\r\n<ul>\r\n<li><strong>显示译码器</strong></li>\r\n</ul>\r\n<p>啊就是能直观的显示出翻译后信息的译码器。看下面俩图就知道它是什么东西了。</p>\r\n<p><img src=\"24.png\" /><img src=\"25.png\" /></p>\r\n<ul>\r\n<li><strong>练习</strong></li>\r\n</ul>\r\n<blockquote>\r\n<p>试用两片74138组成4线-16线译码器。将输入的4位二进制代码<span\r\nclass=\"math inline\">\\(D_3D_2D_1D_0\\)</span>译成16个独立的低电平信号<span\r\nclass=\"math inline\">\\(\\overline{Z_0} \\sim\r\n\\overline{Z_{15}}\\)</span>。</p>\r\n</blockquote>\r\n<p>有了前面用两块74148组成16线-4线编码器的经验，这题的思考方式是一样的。首先如果只用一块板的话，3个二进制数，可以得到0\r\n~ 7。如果大于7怎么办呢？观察一下： <span class=\"math display\">\\[\r\n(8)_d = (1000)_b \\leftrightarrow (0)_d = (000)_b \\\\\r\n(9)_d = (1001)_b \\leftrightarrow (1)_d = (001)_b \\\\\r\n(10)_d = (1010)_b \\leftrightarrow (2)_d = (010)_b \\\\\r\n..... \\leftrightarrow ...\r\n\\]</span> 发现规律了没？</p>\r\n<p>只要四位二进制中第四位为0，将剩下3位二进制传给第一块板的三个输入接口。如果第四位二进制为1，那么堵塞第一块版，将剩下3位二进制传给第二块版的三个输入接口。答案如下：</p>\r\n<p><img src=\"26.png\" /></p>\r\n<h4 id=\"用译码器实现逻辑函数\">3.3 用译码器实现逻辑函数</h4>\r\n<p>因为任何逻辑函数均可化成最小项之和的形式。所以可以用译码器实现逻辑函数的电路，很牛逼。看下面这个例子你就懂了。</p>\r\n<p><img src=\"27.png\" /></p>\r\n<p>首先先将F化成主析取范式：<span class=\"math inline\">\\(F = ABC\r\n+AB\\overline{C} + A\\overline{B}C + \\overline{A}BC = m_7 + m_6 + m_5 +\r\nm_3\\)</span></p>\r\n<p>意思是说，只要三输入变量按照7、6、5、3的二进制输入，F就是1。否则F就是0。</p>\r\n<p>好，那我们在74138输出端将<span\r\nclass=\"math inline\">\\(\\overline{Y_7}、\\overline{Y_6}、\\overline{Y_5}、\\overline{Y_3}\\)</span>用与非门连接起来。只要三输入变量输入7、6、5、3二进制其中的一个，那么<span\r\nclass=\"math inline\">\\(\\overline{Y_7}、\\overline{Y_6}、\\overline{Y_5}、\\overline{Y_3}\\)</span>就有一个是0，与非后就得到1。如果三输入变量不属于7、6、5、3二进制中的任何一个，则<span\r\nclass=\"math inline\">\\(\\overline{Y_7}、\\overline{Y_6}、\\overline{Y_5}、\\overline{Y_3}\\)</span>都为1，与非后就得到0。</p>\r\n<hr />\r\n<h3 id=\"四.-组合逻辑电路4\">四. 组合逻辑电路(4)</h3>\r\n<h4 id=\"数据分配器\">4.1 数据分配器</h4>\r\n<p>定义：数据传输过程中，有时需要将数据分配到不同的数据通道上。数据分配器也叫多路分配器，简称DEMUX。</p>\r\n<p>示意图：通过A端口来选择数据输出通道。</p>\r\n<p><img src=\"28.png\" /></p>\r\n<p>电路图：</p>\r\n<p><img src=\"29.png\" /></p>\r\n<p>这个电路还是蛮简单的。</p>\r\n<p>提一嘴，前面学到的74138译码器就可以用来作1路-8路数据分配器。内部电路图ppt没给，但是我觉得就跟上面DEMUX的电路图差不多。</p>\r\n<p><img src=\"30.png\" /></p>\r\n<h4 id=\"数据选择器\">4.2 数据选择器</h4>\r\n<p>定义：能够实现从多路数据中选择一路进行传输的电路叫做数据选择器。也叫多路选择器、多路调制器，简称MUX。常见的类型有二选一、四选一、八选一、十六选一。</p>\r\n<p><img src=\"31.png\" /></p>\r\n<ul>\r\n<li><strong>二选一多路选择器</strong></li>\r\n</ul>\r\n<p><img src=\"32.png\" /></p>\r\n<p>w0和w1分别是两路的数据源，然后s是控制器。先看右边的电路图，假设s是0，则f\r\n= w0，假设s是1，则f = w1。左边就是二选一MUX的图形符号。</p>\r\n<ul>\r\n<li><strong>四选一多路选择器</strong></li>\r\n</ul>\r\n<p>先看真值表，根据真值表就可以直接设计电路了。</p>\r\n<p><img src=\"33.png\" /></p>\r\n<p>所以根据上面的真值表可以写出逻辑表达式：</p>\r\n<p><span class=\"math inline\">\\(f = w_0\\overline{s_1}\\overline{s_0} +\r\nw_1\\overline{s_1}s_0 + w_2s_1\\overline{s_0} + w_3s_1s_0\\)</span></p>\r\n<p>下面右图是用非门 + 与门 +\r\n或门来实现上面的逻辑表达式，左图是四选一MUX的图形符号</p>\r\n<p><img src=\"34.png\" /></p>\r\n<ul>\r\n<li><strong>更大规模的多路选择器</strong></li>\r\n</ul>\r\n<p>可以直接列真值表然后直接构建，也可以用小规模的多路选择器去构建。</p>\r\n<p>看一个由2选1多路选择器构建的4选1多路选择器，就知道如何构建了。</p>\r\n<p><img src=\"35.png\" /></p>\r\n<p>先将w俩俩分组，然后用s0去筛，一下筛掉一半，再用s1去筛，又筛掉一半，最后就选择出来了一路数据。</p>\r\n<h4 id=\"数据选择器的运用\">4.3 数据选择器的运用</h4>\r\n<ol type=\"1\">\r\n<li><p>2x2纵横开关（是否交换数据传输通道）</p>\r\n<p><img src=\"36.png\" /></p>\r\n<ul>\r\n<li>看图，s是选择器。如果s=0，则y1 = x1, y2 = x2。如果s=1，则y1 = x2，y2\r\n= x1。</li>\r\n</ul></li>\r\n<li><p>实现逻辑函数</p>\r\n<ul>\r\n<li><p>最暴力的想法就是列真值表，输入变量A、B、C就是选择器s。每一行的输出就是数据输入通道，输出通道就是f。例如函数<span\r\nclass=\"math inline\">\\(f = \\overline{w_1}w_2 +\r\nw_1\\overline{w_2}\\)</span>，用四选一多路选择器的实现如下：</p>\r\n<p><img src=\"38.png\" /></p></li>\r\n<li><p>但在暴力的基础上其实可以优化：可以对真值表做一个改动：</p>\r\n<p><img src=\"39.png\" /></p></li>\r\n<li><p>这样子输入变量只有一个w1了，它就是选择器。数据输入通道有两个，分别是<span\r\nclass=\"math inline\">\\(w_2\\)</span>和<span\r\nclass=\"math inline\">\\(\\overline{w_2}\\)</span>，数据输出通道一个为f。用二选一多路选择器实现如下：</p>\r\n<p><img src=\"40.png\" /></p></li>\r\n</ul></li>\r\n<li><p>实现3输入表决器</p>\r\n<ul>\r\n<li><p>先列出真值表</p>\r\n<p><img src=\"41.png\" /></p></li>\r\n<li><p>对真值表进行优化</p>\r\n<p><img src=\"42.png\" /></p></li>\r\n<li><p>此时输入变量两个w1、w2为选择器，数据输入通道4个分别是0、w3、w3、1，数据输出通道1个为f。用4选1多路选择器实现如下：</p>\r\n<p><img src=\"43.png\" /></p></li>\r\n</ul></li>\r\n<li><p>实现3位异或运算</p>\r\n<ul>\r\n<li><p>先列出真值表，并优化</p>\r\n<p><img src=\"44.png\" /></p></li>\r\n<li><p>此时输入变量两个w1、w2为选择器，数据输入通道4个分别是<span\r\nclass=\"math inline\">\\(w_3、\\overline{w_3}、\\overline{w_3}、w_3\\)</span>，数据输出通道一个为f。用4选1多路选择器实现如下：</p>\r\n<p><img src=\"45.png\" /></p></li>\r\n</ul></li>\r\n</ol>\r\n<hr />\r\n<h3 id=\"五.-组合逻辑电路5\">五. 组合逻辑电路(5)</h3>\r\n<p>这一节比较杂，主要是对第（4）内容的一个补充。具体来说，讲了如下内容：</p>\r\n<ol type=\"1\">\r\n<li>用香农展开定理搭配多路选择器实现逻辑函数</li>\r\n<li>八选一数据选择器74151</li>\r\n<li>双四选一数据选择器74153</li>\r\n<li>数据选择器的更多运用</li>\r\n</ol>\r\n<h4 id=\"用香农展开定理搭配多路选择器实现逻辑函数\">5.1\r\n用香农展开定理搭配多路选择器实现逻辑函数</h4>\r\n<ul>\r\n<li><p>香农展开定理：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(f\\left(w_{1}, w_{2}, \\ldots . .\r\nw_{\\mathrm{n}}\\right)=\\overline{w_{1}} f\\left(0, w_{2}, \\ldots . .\r\nw_{\\mathrm{n}}\\right)+w_{1} f\\left(1, w_{2}, \\ldots . .\r\nw_{\\mathrm{n}}\\right)\\)</span></p>\r\n<ul>\r\n<li><p>↑展开一个变量</p></li>\r\n<li><p>在香农表达式中<span\r\nclass=\"math inline\">\\(f\\left(0,w_{2}....w_{\\mathrm{n}}\\right)\\)</span>\r\n项称为对应于<span\r\nclass=\"math inline\">\\(\\bar{w}_{\\mathrm{1}}\\)</span>的<span\r\nclass=\"math inline\">\\(f\\)</span>的余因子式, 简写做<span\r\nclass=\"math inline\">\\(f_{\\overline{w}_1}\\)</span>。 同样的,<span\r\nclass=\"math inline\">\\(f(1,w_2.....w_n)\\)</span> 项称为对应于<span\r\nclass=\"math inline\">\\(w_{_1}\\)</span>的<span\r\nclass=\"math inline\">\\(f\\)</span>的余因子式,简写做<span\r\nclass=\"math inline\">\\(f_{_{w_1}}\\)</span>。所以香农展开定理可以简写成：\r\n<span class=\"math display\">\\[\r\nf=\\overline{w}_{1}f_{\\overline{w}_{1}}+w_{1}f_{w_{1}}\r\n\\]</span></p></li>\r\n</ul></li>\r\n<li><p><span class=\"math inline\">\\(f(w_1,w_2,....,w_n)=\\\\\r\n\\overline{w_1}\\overline{w_2}f(0,0,w_3....w_n)+\\overline{w_1}w_2f(0,1,w_3,.....w_n)+w_1\\overline{w_2}f(1,0,w_3,.....w_n)+\r\n\\\\ w_1w_2f(1,1,w_3,.....w_n)\\)</span></p>\r\n<ul>\r\n<li>↑展开多个变量</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<p>那如何用香农展开定理实现逻辑函数呢？举个例子，比如<span\r\nclass=\"math inline\">\\(f=\\overline{w}_{1}\\overline{w}_{3}+w_{1}w_{2}+w_{1}w_{3}\\)</span></p>\r\n<p>将f以w1用香农展开定理展开，得到<span\r\nclass=\"math inline\">\\(f=\\overline{w}_1f_{\\overline{w}_1}+w_1f_{w_1}=\\overline{w}_1(\\overline{w}_3)+w_1(w_2+w_3)\\)</span></p>\r\n<p>然后选用二路选择器，w1是选择器，数据输入通道2个分别是<span\r\nclass=\"math inline\">\\(\\overline{w_3}\\)</span>和<span\r\nclass=\"math inline\">\\(w_2 +\r\nw_3\\)</span>，数据输出通道一个为f。实现电路图如下：</p>\r\n<p><img src=\"46.png\" /></p>\r\n<p>同理，如果用香农展开定理展开两个变量，则搭配一个四路选择器也可以实现上述函数f。</p>\r\n<h4 id=\"八选一数据选择器74151\">5.2 八选一数据选择器74151</h4>\r\n<p>74151MUX的样子和真值表如下图</p>\r\n<p><img src=\"47.png\" /></p>\r\n<h4 id=\"双四选一数据选择器74153\">5.3 双四选一数据选择器74153</h4>\r\n<p>就是俩独立的四路选择器放一起，如图。（个人觉得左图很不直观，下面练习中的74153比较直观）</p>\r\n<p><img src=\"48.png\" /></p>\r\n<blockquote>\r\n<p>练习：如何用74153构建一个74151？</p>\r\n</blockquote>\r\n<p>很简单，跟以前练习题一样的套路。只要保证两个四选一板子有且只能有一块板子在工作就行了。看答案吧，很简单。</p>\r\n<p><img src=\"49.png\" /></p>\r\n<p>A2还有G1就是为了实现”只能有一个四选一“板子在工作我们自己加上去的电路。</p>\r\n<h4 id=\"小补充\">5.4 小补充</h4>\r\n<p>感觉代号多了有点乱了。让我来梳理一下。</p>\r\n<p>74148是最常见的8线-3线优先编码器。</p>\r\n<p>74138是最常见的二进制译码器。（3个输入、8个输出）</p>\r\n<p>数据分配器DEMUX可用74138实现。</p>\r\n<p>数据选择器MUX有74151（八路）、74153（俩独立四路放一起）</p>\r\n<h4 id=\"数据选择器的更多运用\">5.5 数据选择器的更多运用</h4>\r\n<ol type=\"1\">\r\n<li><p>与DEMUX实现多路信号分时传送</p>\r\n<p><img src=\"50.png\" /></p></li>\r\n<li><p>实现逻辑函数</p>\r\n<ul>\r\n<li><p>用MUX实现逻辑函数的方法有许多。</p>\r\n<ol type=\"1\">\r\n<li>直接列真值表实现</li>\r\n<li>列完真值表，对真值表优化后实现</li>\r\n<li>用香农展开公式后实现</li>\r\n<li>列引入变量的卡诺图实现</li>\r\n</ol></li>\r\n<li><p>前三种方法前面都介绍过了，这里放一个用第四种方法的例题。</p>\r\n<p><img src=\"51.png\" /></p></li>\r\n<li><p>因为74151是八位选择器，所以只能有3个选择变量。所以画卡诺图引入了一个变量。然后8个信号输入端口就输入0/1/D/<span\r\nclass=\"math inline\">\\(\\overline{D}\\)</span>即可。</p></li>\r\n<li><blockquote>\r\n<p>练习：请用一片74151实现逻辑函数<span\r\nclass=\"math inline\">\\(F(A,B,C,D,E)=A\\overline{B}C\\overline{D}E+AB\\overline{C}\\overline{D}\\overline{E}+A\\overline{B}C\\overline{D}\\overline{E}+\\overline{A}\\overline{B}\\overline{C}DE+\\overline{A}B\\overline{C}\\overline{D}\\overline{E}\\)</span></p>\r\n</blockquote></li>\r\n<li><p>74151是八路选择器，所以要有三个选择变量。但是这里F有5个，所以第一想法是用香农展开定理展开3个变量，但是这样太麻烦了。所以用第四种方法，引入两个变量进卡诺图即可。</p>\r\n<p><img src=\"52.png\" /></p></li>\r\n</ul></li>\r\n<li><p>数据选择器的扩展</p>\r\n<ul>\r\n<li><p>很好理解，看图即可。</p>\r\n<p><img src=\"53.png\" /></p></li>\r\n</ul></li>\r\n</ol>\r\n<hr />\r\n<h3 id=\"六.-组合逻辑电路6\">六. 组合逻辑电路(6)</h3>\r\n<h4 id=\"数值比较器\">6.1 数值比较器</h4>\r\n<ul>\r\n<li><strong>一位数值比较器</strong></li>\r\n</ul>\r\n<p>两个1位二进制数A,B相比的情况有以下几种: 1. A&gt;B，则<span\r\nclass=\"math inline\">\\(A\\overline{B}=1\\)</span>，所以可用<span\r\nclass=\"math inline\">\\(A\\overline{B}\\)</span>作为A&gt;B的输出信号<span\r\nclass=\"math inline\">\\({Y}_{(A&gt;B)}\\)</span> 。<br />\r\n2. 同理可用 <span class=\"math inline\">\\(\\overline{AB}\\)</span>\r\n作为A&lt;B的输出信号 <span class=\"math inline\">\\({Y}_{(A&lt;B)}\\)</span>\r\n。 3. 同理可用<span class=\"math inline\">\\(A \\odot B\\)</span>\r\n作为A=B的输出信号 <span class=\"math inline\">\\(Y_{A=B}\\)</span></p>\r\n<p>于是可以设计出如下电路（注意是低电平有效）</p>\r\n<p><img src=\"54.png\" /></p>\r\n<ul>\r\n<li><strong>多位数值比较器</strong></li>\r\n</ul>\r\n<p>多位数值比较器的原理就是从高位到低位逐位比较，最常见的是4位比较器14585，下面是其逻辑函数和电路图：</p>\r\n<p><img src=\"55.png\" /></p>\r\n<p><img src=\"56.png\" /></p>\r\n<p>这个图有4个要注意的地方，首先看蓝色箭头的地方，为啥这个地方用与非门呢？很简单，将上面的逻辑表达式进行进一步化简：\r\n<span class=\"math display\">\\[\r\nY_{A&lt;B} = \\overline{\\overline{\\overline{A_3}B_3} \\cdot\r\n\\overline{\\overline{A_3 \\oplus B_3}\\overline{A_2}B_2} \\cdot ...} \\,\r\n\\cdot I_{A&lt;B}  \\\\\r\n= \\overline{\\overline{\\overline{A_3}B_3} \\cdot ((A_3 \\oplus B_3) +\r\n\\overline{\\overline{A_2}B_2}) \\cdot \\, ...} \\, \\cdot I_{A&lt;B}\r\n\\]</span> 现在知道蓝色箭头为啥用与非门了吧=w=。</p>\r\n<p>那为啥绿色箭头那要用或门呢？还是看上面化简的式子，注意看第二项，第二项就是或门=w=。</p>\r\n<p>那为啥棕色箭头用或非门呢？还是化简上面的式子： <span\r\nclass=\"math display\">\\[\r\nY_{A=B} = \\overline{(A_3 \\oplus B_3) + (A_2 \\oplus B_2) + (略) + (略)}\r\n\\, \\cdot I_{A=B}\r\n\\]</span>\r\n很清楚吧=w=，就是一个或非门，每一项这里用异或表达了，其实就是图中判断是否每一项是否相等的那个逻辑门。</p>\r\n<p>那为啥红箭箭头那要用或非门呢？还是化简上面的式子： <span\r\nclass=\"math display\">\\[\r\nY_{A&gt;B} = \\overline{(Y_{A&lt;B} + Y_{A=B}) + \\overline{I_{A&gt;B}}}\r\n\\]</span> easy。</p>\r\n<p>还剩一个问题，那三个<span\r\nclass=\"math inline\">\\(I\\)</span>是干啥的。其实就是用来接收低位上的结果的。这样两块14585就能实现8位数字的比较。如下图：</p>\r\n<p><img src=\"57.png\" /></p>\r\n<p>有个问题，为啥左边的<span\r\nclass=\"math inline\">\\(Y_{A&gt;B}\\)</span>为啥不能连到右边的<span\r\nclass=\"math inline\">\\(I_{A=B}\\)</span>？</p>\r\n<p>其实可以，但是图中这样连也没问题。还是用逻辑表达式去解释：<span\r\nclass=\"math inline\">\\(Y_{A&gt;B} = \\overline{(Y_{A&lt;B} + Y_{A=B}) +\r\n\\overline{I_{A&gt;B}}}\\)</span>，可以发现必须要三者都是0才会使得<span\r\nclass=\"math inline\">\\(Y_{A&gt;B}=1\\)</span>，所以默认给<span\r\nclass=\"math inline\">\\(I_{A&gt;B}\\)</span>置为1不影响结果。</p>\r\n<h4 id=\"加法器\">6.2 加法器</h4>\r\n<ul>\r\n<li><strong>半加器</strong></li>\r\n</ul>\r\n<p>很简单，真值表、逻辑表达式、图形符号如下图：</p>\r\n<p><img src=\"58.png\" /></p>\r\n<ul>\r\n<li><strong>全加器</strong></li>\r\n</ul>\r\n<p>加了一个考虑上一位进位而已，也很简单，真值表、逻辑表达式、图形符号如下：</p>\r\n<p><img src=\"59.png\" /></p>\r\n<p>这里解释一下逻辑表达式，因为异或是不进位加法，所以S等于三者异或很合理。然后CO用或连接也很合理，无非就是A、B都是1可以进位，或者CI为1，A、B里任意一个为1也可以进位。</p>\r\n<ul>\r\n<li><strong>串行进位加法器</strong></li>\r\n</ul>\r\n<p>有了全加器之后，只需要将多个全加器串联起来就可以得到任意多位的加法器了。如下图：</p>\r\n<p><img src=\"60.png\" /></p>\r\n<p>虽然这样逻辑和电路都很简单，但是存在一个问题，就是速度过慢，如何解决呢？</p>\r\n<p>速度关键是慢在进行信号逐级传递的过程，所以要优化这个过程。不难发现，要想知道<span\r\nclass=\"math inline\">\\(CI_i\\)</span>，只需要知道<span\r\nclass=\"math inline\">\\(A_{i-1}A_{i-2}...A_0\\)</span>和<span\r\nclass=\"math inline\">\\(B_{i-1}B_{i-2}...B_0\\)</span>即可。</p>\r\n<p>个人觉得，这种优化思路就很像把递归函数展开来写了笑死。也有点像并查集路径压缩。</p>\r\n<ul>\r\n<li><strong>超前进位加法器</strong></li>\r\n</ul>\r\n<p>用上面提到的优化方法做成的加法器就叫做超前进位加法器。下图是74283的超前进位加法器电路图：</p>\r\n<p><img src=\"61.png\" /></p>\r\n<p>可以发现光4位加法器电路就那么复杂了，这或许就是空间换时间吧（笑）</p>\r\n<p>所以当我们需要更多位加法器的时候，可以拿74283超前进位加法器去串联做成一个多位的串行进位加法器。</p>\r\n<blockquote>\r\n<p>练习：用一片74283设计将BCD8421码转换成余3码的电路</p>\r\n</blockquote>\r\n<p>太简单啦！直接上图：</p>\r\n<p><img src=\"62.png\" /></p>\r\n<h4 id=\"竞争-冒险现象\">6.3 竞争-冒险现象</h4>\r\n<p>啊我懒得打很多字了，这里我放一个up主的视频，看完这道例题就知道什么是竞争-冒险现象了：（up主：海蓬莱）</p>\r\n<video src=\"video.mp4\" controls=\"controls\">\r\n</video>\r\n<p>视频中的险象就是这里的冒险。官方定义如下 ：</p>\r\n<p>竞争：一个逻辑门的两个输入端的信号同时向相反方向变化，而变化的时间有差异的现象。</p>\r\n<p>冒险：由于竞争而使电路输出发生瞬时错误</p>\r\n<p>注意，有竞争不一定会冒险（如视频中提到的非临界竞争）</p>\r\n<p>冒险分为两类：</p>\r\n<ol type=\"1\">\r\n<li>0型冒险：即本来是1的变成了0\r\n<ul>\r\n<li>当表达式在一定条件下能化成<span class=\"math inline\">\\(F = A +\r\n\\overline{A}\\)</span>时，就会出现0型冒险</li>\r\n</ul></li>\r\n<li>1型冒险：即本来是0的变成了1\r\n<ul>\r\n<li>当表达式在一定条件下能化成<span class=\"math inline\">\\(F = A \\cdot\r\n\\overline{A}\\)</span>时，就会出现1型冒险</li>\r\n</ul></li>\r\n</ol>\r\n<p>如何能消除竞争-冒险现象呢？ppt上给出了三种解决方案：</p>\r\n<ol type=\"1\">\r\n<li><p>接入滤波电容</p></li>\r\n<li><p>引入选通脉冲</p></li>\r\n<li><p>修改逻辑表达式</p>\r\n<ul>\r\n<li>前俩个反正我是没看懂，这里举个例子说一下第三种方法。比如有逻辑函数<span\r\nclass=\"math inline\">\\(F = AB + \\overline{A}C\\)</span>，当B = C =\r\n1时会出现0型冒险。所以可以修改一下逻辑表达式为：<span\r\nclass=\"math inline\">\\(F = AB + \\overline{A}C +\r\nBC\\)</span>，这样就不会出现0型冒险了。（为什么要这么修改呢？看下面的卡诺图你就知道了）</li>\r\n</ul>\r\n<p><img src=\"63.png\" /></p></li>\r\n</ol>\r\n<hr />\r\n<h3 id=\"七.-vivado的基本使用\">七. Vivado的基本使用</h3>\r\n<p>先来了解一下EDA技术：即电子设计自动化，其依赖功能强大的计算机，在\r\nEDA工具软件平台上，对以硬件描述语言(HDL)为系统逻辑描述手段完成的设计文件，自动地完成逻辑编译、逻辑化简、逻辑分割、逻辑综合、布局布线，以及逻辑优化和仿真测试，直至物理实现既定的电子设计系统功能。</p>\r\n<p>以我浅薄的理解，EDA = IDE，Verilog =\r\nC++，hhhhh，FPGA是可编程逻辑器件。</p>\r\n<h4 id=\"用verilog-hdl设计电路\">用Verilog HDL设计电路</h4>\r\n<p>写一个模块大致分为以下几步：</p>\r\n<ol type=\"1\">\r\n<li>打开Vivado，创建一个项目（根据自己开发板选型号，我的是xc7a35tcpg236-1）</li>\r\n<li>新建一个design文件，在里头写程序</li>\r\n<li>新建一个sim文件，在里头写仿真程序（初始化 + 实例化 +\r\n仿真过程代码）</li>\r\n<li>运行仿真，观察仿真结果是否跟设想一样</li>\r\n<li>封装IP核，以便此模块以后可被其它项目使用</li>\r\n</ol>\r\n<h4 id=\"用block-design设计电路\">用Block Design设计电路</h4>\r\n<ol type=\"1\">\r\n<li>打开Vivado，创建一个项目</li>\r\n<li>左侧新建一个Block Design项目</li>\r\n<li>引入IP核，开始画图</li>\r\n<li>新建一个sim文件，写仿真程序</li>\r\n<li>运行仿真，观察仿真结果是否跟设想一样</li>\r\n</ol>\r\n<h4 id=\"用rtl看电路图\">用RTL看电路图</h4>\r\n<p>点左侧RTL分析即可生成。</p>\r\n<h4 id=\"下板\">下板</h4>\r\n<ol type=\"1\">\r\n<li>写好constraint文件（我直接用的老师给的模板文件上修改）</li>\r\n<li>运行左侧Synthesis</li>\r\n<li>运行Implementation（记得勾选第二项产生二进制文件，然后选择Open\r\nHardware Manager）</li>\r\n<li>通过USB连上FPGA</li>\r\n<li>点击Auto Connect，连接成功后选择Program\r\nDevice下载刚才的二进制文件</li>\r\n<li>可以愉快的用板子观察程序结果啦~</li>\r\n</ol>\r\n<p>但是断电后程序就会丢失，为了解决这个问题，需要把程序烧录进ROM里：</p>\r\n<ol type=\"1\">\r\n<li>生成bin文件，Tools -&gt; Settings -&gt; Bitstream -&gt;\r\n勾选-bin-file* -&gt; OK，左侧Generate\r\nBitstream重新生成bit文件（此时就会生成bin文件）</li>\r\n<li>右键芯片选择Add Configuration Memory Device，选择合适的闪存型号</li>\r\n</ol>\r\n<h4 id=\"总结\">总结</h4>\r\n<p>Vivado这个软件其实蛮简单使用的。首先不考虑板子的话，只在电脑上设计电路有两种方法，第一种就是直接创建design文件写，第二种就是用Block\r\nDesign（若某个模块想封装成IP核必须要仿真过先）。然后想看设计的对不对，就创建仿真文件来看。另外，用RTL可以看设计好的电路。</p>\r\n<p>下板的话就需要通过constraint文件指定管脚，然后左侧Synthesis +\r\nImplementation + 生成二进制文件 + 连板子 + Auto Connect + Program\r\nDevice就可以在板子上观察了。</p>\r\n","categories":["大学","数字逻辑"]},{"title":"期末Lab1 存储管理","url":"/2023/10/09/%E6%9C%9F%E6%9C%ABLab1-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/","content":"<p>今天突然就上强度了。实验课是让我们设计一个简单的RDBMS原型系统。（本质上就是参考的CMU15-445课程和StanfordCS346的课程）我觉得还是蛮有趣的，开一个系列来记录实验过程。</p>\r\n<p>本篇是Lab 1，存储管理部分的内容。</p>\r\n<span id=\"more\"></span>\r\n<p>课程目标：</p>\r\n<p><img src=\"1.png\" /></p>\r\n<h3 id=\"一.-安装docker以及基本操作\">一. 安装Docker以及基本操作</h3>\r\n<p>为了简化实验过程，尽可能的避免复杂的环境配置过程。助教推荐我们使用Docker，这样直接就能使用他配置好的环境。</p>\r\n<h4 id=\"docker是什么\">1. Docker是什么</h4>\r\n<p>根据我浅薄的理解，Docker就是虚拟机。装一个Docker，下载网上的镜像，然后把实例化为一个容器。此时容器就是一台虚拟机了。</p>\r\n<h4 id=\"如何安装docker\">2. 如何安装Docker</h4>\r\n<p>先安装wsl，wsl是在window下的linux子系统功能。本人Win11电脑，先在“启动或关闭Windows功能”里打开“虚拟机平台”和“适用于Linux的Windows子系统”，然后终端里输入wsl\r\nupdate，更新完后再输入wsl --install -d\r\nUbuntu，设置好Ubuntu用户名和密码后退出即可。</p>\r\n<p>然后下载Docker\r\nDesktop，下载好后不要安装。因为默认路径是C盘，后续可能会很占空间。通过软链接的方法把Docker装到D盘，终端里输入（记得用管理员权限）：mklink\r\n/j \"C:\\Program Files\\Docker\"\r\n\"D:\\app\\Docker\"（如果报错没找到文件夹则在目标路径下自己新建文件夹后再执行）。</p>\r\n<p>点击安装包，一路Next。安装好后在Docker设置里的Docker\r\nEnginel里改变源：</p>\r\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;registry-mirrors&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;http://hub-mirror.c.163.com&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;insecure-registries&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;debug&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;experimental&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\r\n<p>至此，Docker就安装好了。</p>\r\n<h4 id=\"docker的基本操作\">3. Docker的基本操作</h4>\r\n<p>Docker里有三种东西，镜像、容器、仓库。</p>\r\n<p>镜像(image)是类似模板的东西，是一个只读文件。可以用来创建容器。</p>\r\n<p>容器(container)就是我们操作的“虚拟机”，它需要根据镜像实例化出来。</p>\r\n<p>仓库(repository)就是存储镜像的地方，我们通常可以从三个地方获得镜像：官方仓库、第三方仓库、本地</p>\r\n<p>基本操作如下：</p>\r\n<ol type=\"1\">\r\n<li><p>列出本地的所有镜像</p>\r\n<ul>\r\n<li>docker image ls</li>\r\n</ul></li>\r\n<li><p>拉取镜像到本地</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 拉取官方镜像</span><br><span class=\"line\">docker pull 镜像名称</span><br><span class=\"line\">例：docker pull ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"># 拉取个人镜像</span><br><span class=\"line\">docker pull 仓库名称/镜像名称</span><br><span class=\"line\">例：docker pull xunmi/django</span><br><span class=\"line\"></span><br><span class=\"line\"># 第三方仓库拉取</span><br><span class=\"line\">docker pull 第三方仓库地址/仓库名称/镜像名称</span><br><span class=\"line\">例：docker pull hub.c.163.com/library/mysql:latest</span><br></pre></td></tr></table></figure></li>\r\n<li><p>删除镜像</p>\r\n<ul>\r\n<li>docker rmi 镜像名</li>\r\n<li>注意删镜像时需保证此时没有容器以该镜像为模板进行实例化。</li>\r\n</ul></li>\r\n<li><p>删除容器</p>\r\n<ul>\r\n<li>docker rm 容器名</li>\r\n<li>注意删除容器时需保证该容器没有在运行。</li>\r\n</ul></li>\r\n<li><p>关于管理镜像 &amp; 容器</p>\r\n<ul>\r\n<li>可以在Docker Desktop的Dashboard里进行管理。</li>\r\n</ul></li>\r\n</ol>\r\n<h3 id=\"二.-docker在本实验中的运用\">二. Docker在本实验中的运用</h3>\r\n<p>本实验要实现一个RDBMS，所以代码基本框架可以从助教发布的GitHub上clone到本地。但是当你完善了代码，如何知道自己对不对呢？肯定要测评嘛，以及编译这个RDBMS应该怎么办呢？比如代码用到了C++17的特性但是本地编译不了就很尴尬。所以需要Docker，助教发给我们一个镜像文件，我们把它实例化一个容器到本地。然后将刚刚clone下来的项目文件夹同步到容器中（也就是实现文件共享）。这样子我们就可以在本地编写程序，文件自动就会同步到容器中，编写完成后。通过Docker进入容器中，编译程序并进行测评，查看自己编写的程序是否正确。</p>\r\n<h4 id=\"初次配置流程\">1. 初次配置流程：</h4>\r\n<ol type=\"1\">\r\n<li>下载助教发的base-env.img镜像文件到本地，cd到img所在文件夹，在终端里输入docker\r\nimage load --input ./base-env.img拉取镜像到Docker中。（或者直接docker\r\npull cc0de/base-env:1.0）</li>\r\n<li>将助教上传到GitHub的项目文件夹clone到本地，我自己的路径是：D:/Projects/dbProjects/lab1/UniBase(UniBase是clone下来的文件夹)</li>\r\n<li>cd到lab1下，在终端里输入docker run -itd -v .\\UniBase:/mnt/UniBase\r\n--name unibase-env\r\nbase-env。这句话的意思就是将名为base-env的镜像文件实例化为一个容器到本地，名字起为unibase-env。并且将当前目录下的UniBase文件夹同步到unibase-env容器中/mnt下的UniBase文件夹。（mnt文件夹是wsl子系统与宿主系统进行文件交互的文件夹）</li>\r\n<li>cd到UniBase下，输入git submodule init和git submodule\r\nupdate来拉取子模块(google test)</li>\r\n<li>如果需要进容器，输入docker exec -it unibase-env\r\n/bin/bash。如果退出，输入exit。</li>\r\n</ol>\r\n<h4 id=\"编写流程\">2. 编写流程：</h4>\r\n<ol type=\"1\">\r\n<li>先在本地，用vscode写好程序</li>\r\n<li>开docker desktop，然后进容器docker exec -it unibase-env\r\n/bin/bash，进UniBase里，新建一个build文件夹，在里面运行：cmake ..\r\n-DCMAKE_BUILD_TYPE=Debug，就可以生成整个项目的编译文件，然后make\r\n某个module，比如make\r\ndisk_manager_test，就会编译这个模块并在/build/bin里生成可执行文件，进入bin里运行它就可以看到评测信息。</li>\r\n</ol>\r\n","categories":["大学","数据库"]}]
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Error_666</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-09T14:18:36.880Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Error_666</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>期末Lab1 存储管理</title>
    <link href="http://example.com/2023/10/09/%E6%9C%9F%E6%9C%ABLab1-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2023/10/09/%E6%9C%9F%E6%9C%ABLab1-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</id>
    <published>2023-10-09T13:03:39.000Z</published>
    <updated>2023-10-09T14:18:36.880Z</updated>
    
    <content type="html"><![CDATA[<p>今天突然就上强度了。实验课是让我们设计一个简单的RDBMS原型系统。（本质上就是参考的CMU15-445课程和StanfordCS346的课程）我觉得还是蛮有趣的，开一个系列来记录实验过程。</p><p>本篇是Lab 1，存储管理部分的内容。</p><span id="more"></span><p>课程目标：</p><p><img src="1.png" /></p><h3 id="一.-安装docker以及基本操作">一. 安装Docker以及基本操作</h3><p>为了简化实验过程，尽可能的避免复杂的环境配置过程。助教推荐我们使用Docker，这样直接就能使用他配置好的环境。</p><h4 id="docker是什么">1. Docker是什么</h4><p>根据我浅薄的理解，Docker就是虚拟机。装一个Docker，下载网上的镜像，然后把实例化为一个容器。此时容器就是一台虚拟机了。</p><h4 id="如何安装docker">2. 如何安装Docker</h4><p>先安装wsl，wsl是在window下的linux子系统功能。本人Win11电脑，先在“启动或关闭Windows功能”里打开“虚拟机平台”和“适用于Linux的Windows子系统”，然后终端里输入wslupdate，更新完后再输入wsl --install -dUbuntu，设置好Ubuntu用户名和密码后退出即可。</p><p>然后下载DockerDesktop，下载好后不要安装。因为默认路径是C盘，后续可能会很占空间。通过软链接的方法把Docker装到D盘，终端里输入（记得用管理员权限）：mklink/j "C:\Program Files\Docker""D:\app\Docker"（如果报错没找到文件夹则在目标路径下自己新建文件夹后再执行）。</p><p>点击安装包，一路Next。安装好后在Docker设置里的DockerEnginel里改变源：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>至此，Docker就安装好了。</p><h4 id="docker的基本操作">3. Docker的基本操作</h4><p>Docker里有三种东西，镜像、容器、仓库。</p><p>镜像(image)是类似模板的东西，是一个只读文件。可以用来创建容器。</p><p>容器(container)就是我们操作的“虚拟机”，它需要根据镜像实例化出来。</p><p>仓库(repository)就是存储镜像的地方，我们通常可以从三个地方获得镜像：官方仓库、第三方仓库、本地</p><p>基本操作如下：</p><ol type="1"><li><p>列出本地的所有镜像</p><ul><li>docker image ls</li></ul></li><li><p>拉取镜像到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 拉取官方镜像</span><br><span class="line">docker pull 镜像名称</span><br><span class="line">例：docker pull ubuntu</span><br><span class="line"></span><br><span class="line"># 拉取个人镜像</span><br><span class="line">docker pull 仓库名称/镜像名称</span><br><span class="line">例：docker pull xunmi/django</span><br><span class="line"></span><br><span class="line"># 第三方仓库拉取</span><br><span class="line">docker pull 第三方仓库地址/仓库名称/镜像名称</span><br><span class="line">例：docker pull hub.c.163.com/library/mysql:latest</span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p><ul><li>docker rmi 镜像名</li><li>注意删镜像时需保证此时没有容器以该镜像为模板进行实例化。</li></ul></li><li><p>删除容器</p><ul><li>docker rm 容器名</li><li>注意删除容器时需保证该容器没有在运行。</li></ul></li><li><p>关于管理镜像 &amp; 容器</p><ul><li>可以在Docker Desktop的Dashboard里进行管理。</li></ul></li></ol><h3 id="二.-docker在本实验中的运用">二. Docker在本实验中的运用</h3><p>本实验要实现一个RDBMS，所以代码基本框架可以从助教发布的GitHub上clone到本地。但是当你完善了代码，如何知道自己对不对呢？肯定要测评嘛，以及编译这个RDBMS应该怎么办呢？比如代码用到了C++17的特性但是本地编译不了就很尴尬。所以需要Docker，助教发给我们一个镜像文件，我们把它实例化一个容器到本地。然后将刚刚clone下来的项目文件夹同步到容器中（也就是实现文件共享）。这样子我们就可以在本地编写程序，文件自动就会同步到容器中，编写完成后。通过Docker进入容器中，编译程序并进行测评，查看自己编写的程序是否正确。</p><p>具体流程：</p><ol type="1"><li>下载助教发的base-env.img镜像文件到本地，cd到img所在文件夹，在终端里输入dockerimage load --input ./base-env.img拉取镜像到Docker中</li><li>GitHub克隆将助教的项目文件夹clone到本地，我自己的路径时：D:/Projects/dbProject/lab1/UniBase(UniBase是clone下来的文件夹)</li><li>cd到lab1下，在终端里输入docker run -itd -v .\UniBase:/mnt/UniBase--name unibase-envbase-env。这句话的意思就是将名为base-env的镜像文件实例化为一个容器到本地，名字起为unibase-env。并且将当前目录下的UniBase文件夹同步到unibase-env容器中/mnt下的UniBase文件夹。</li><li>如果需要进行容器，输入docker exec -it unibase-env/bin/bash。如果退出，输入exit。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天突然就上强度了。实验课是让我们设计一个简单的RDBMS原型系统。（本质上就是参考的CMU15-445课程和StanfordCS346的课程）我觉得还是蛮有趣的，开一个系列来记录实验过程。&lt;/p&gt;
&lt;p&gt;本篇是Lab 1，存储管理部分的内容。&lt;/p&gt;</summary>
    
    
    
    <category term="大学" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    <category term="数据库" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>数字逻辑自学笔记</title>
    <link href="http://example.com/2023/10/06/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/10/06/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2023-10-06T08:57:58.000Z</published>
    <updated>2023-10-09T13:16:08.165Z</updated>
    
    <content type="html"><![CDATA[<p>写于2023/10/6，这门课其实还是有点意思的。但是上个月身体原因一直在关心我自己的身体，所以这门课我全翘掉了，一点没听。现在马上就要实验课了，于是打算在国庆的末尾把这门课学了。目的是能做出几个组合逻辑电路的实验项目。</p><p>自学参考的内容为老师ppt、各种网上博客。</p><p>学完后打算去刷题巩固一下，刷题打算在一个up主视频里刷：<ahref="https://www.bilibili.com/video/BV1H54y1k7kM?p=1&amp;vd_source=2501060da9b4bef86e2b8ec8a8d880b5">传送门</a></p><p>最后，如果有朋友打算认真看这篇Blog进行学习的话，为了更好的阅读体验建议开梯子，因为本文有许多图片和一个视频。（存储在github中）</p><span id="more"></span><p>先放一张各种门的符号图，后面忘了的话可以参考：</p><p><img src="1.png" /></p><p><img src="2.png" /></p><h3 id="一.-组合逻辑电路1">一. 组合逻辑电路(1)</h3><h4 id="概述">1.1. 概述</h4><p>电路分为组合逻辑电路和时序逻辑电路。差别就是组合逻辑电路无记忆功能，时序逻辑电路有。</p><p>描述电路的逻辑功能有以下几种形式：</p><ol type="1"><li>语言描述</li><li>电路图</li><li>逻辑表达式，即y = f(a1, a2, a3, ..., an)</li><li>真值表</li><li>卡诺图</li><li>波形图</li></ol><h4 id="组合逻辑电路的分析-和-逻辑函数的设计方法">1.2.组合逻辑电路的分析 和 逻辑函数的设计方法</h4><ul><li><p><strong>分析</strong>：</p><ul><li><p>即给你一个电路，让你告诉我这个电路是干啥用的。</p></li><li><p>分析一个组合逻辑电路的固定套路很简单：</p><ol type="1"><li>一层一层写出逻辑表达式</li><li>对最后得到的逻辑表达式进行化简<ul><li>化简手段1：卡诺图</li><li>化简手段2：<span class="math inline">\(A + A \cdot B = A 或 A \cdot(A + B) = A\)</span></li><li>化简手段3：<span class="math inline">\(A + \overline{A}B = A + B 或A \cdot (\overline{A} + B) = A \cdot B\)</span></li><li>化简手段4：<span class="math inline">\(\overline{A}\overline{C} +A\overline{B} + \overline{B}\overline{C} = \overline{A}\overline{C} +A\overline{B}\)</span>（对于<spanclass="math inline">\(\overline{B}\overline{C}\)</span>添项即可证明）</li><li>化简手段5：<span class="math inline">\(A \oplus B = \overline{A}B +A\overline{B}\)</span></li><li>化简手段6：<span class="math inline">\(A \odot B = (\overline{A} +B)(A + \overline{B})\)</span></li></ul></li><li>对化简后的逻辑表达式列真值表，观察真值表，观察出此电路的功能</li></ol></li><li><p>例子：</p><p><img src="3.png" /></p><ul><li>T1是个与门，T2是个或门，第一层剩下都是与门，第二层一个或门，第三层一个非门，第四层一个与门，最后一层一个或门。最后通过真值表很容易看出ABC三个输入变量但有两个输出变量。不难想到是一个全加器。A、B是两个加数，C是上一位的进位，F1是当前位，F2是进位。</li><li>还有许多功能电路啦......比如半加器（2输入2输出）、投票表决器（多输入1输出）、奇校验电路（多输入1输出）、一致性电路（多输入1输出）</li></ul></li></ul></li><li><p><strong>设计</strong>：</p><ul><li><p>告诉你一个功能，让你设计出一个电路来实现它。</p></li><li><p>也是有固定套路的：</p><ol type="1"><li><p>分析功能，确定输入输出变量</p><ul><li>确定输入输出变量还是有点讲究的，有时候设计的好了可以大大减少运算量和电路的复杂程度。比如下面两个功能，换做是你，你会怎样设计？</li></ul><p><img src="4.png" /> <img src="5.png" /></p><ul><li>设计的关键其实是做到尽可能的<strong>复用</strong>，即对于不同对象的同一属性，尽量用一个变量表达出来。</li></ul></li><li><p>根据题意，直接构造出电路。或者写出真值表然后写出主析取范式然后再用卡诺图化简后得到最终逻辑表达式</p></li><li><p>根据逻辑表达式，选取一种门电路，画出电路图</p></li></ol></li></ul></li></ul><hr /><h3 id="二.-组合逻辑电路2">二. 组合逻辑电路(2)</h3><p>上一节我们已经可以设计出逻辑表达式。但是具体选用哪一种门电路呢？每一种门电路应该如何设计呢？这一节我们就来学习。</p><h4 id="单输出电路设计">2.1. 单输出电路设计</h4><h5 id="用与非门设计电路">2.1.1. 用与非门设计电路</h5><p>对于逻辑表达式F = ...中的 + 全部换成 <spanclass="math inline">\(\cdot\)</span> 就好了，按照这个思路，只要在 +的头上画两根取反号就行了，最上面那根保留，下面那根负责把 + 换成 <spanclass="math inline">\(\cdot\)</span> 。</p><p>但这样得到的实际电路可能耗材过多，实际中有些式子通过观察还能发现可以化的更简，比如下面这个例子：</p><p><span class="math inline">\(F = A\overline{B} + B\overline{C} +C\overline{D} + D\overline{A} = \overline{\overline{A\overline{B}} \cdot\overline{B\overline{C}} \cdot \overline{C\overline{D}} \cdot\overline{D\overline{A}}}\)</span></p><p>按理说这样就好了，但是还可以化简的。</p><p><span class="math inline">\(\overline{A\overline{B}} \cdot\overline{B\overline{C}} \cdot \overline{C\overline{D}} \cdot\overline{D\overline{A}} = (\overline{A} + B)(\overline{B} +C)(\overline{C} + D)(\overline{D} + A)\)</span></p><p>上面这个东西，学过二项式定理吗？假如我第一项如果挑B，则第二项不能挑<spanclass="math inline">\(\overline{B}\)</span>，只能挑C，那么第三项也只能挑D，依次类推，第四项只能挑A，得到ABCD。同理，如果我第一项挑<spanclass="math inline">\(\overline{A}\)</span>，那么我只能得到<spanclass="math inline">\(\overline{A}\overline{B}\overline{C}\overline{D}\)</span>。</p><p>即：<span class="math inline">\((\overline{A} + B)(\overline{B} +C)(\overline{C} + D)(\overline{D} + A) = ABCD +\overline{A}\overline{B}\overline{C}\overline{D}\)</span></p><p>对上面那玩意再求两次反，得到<spanclass="math inline">\(\overline{\overline{ABCD} \cdot\overline{\overline{A}\overline{B}\overline{C}\overline{D}}}\)</span></p><p>这样子，就得到<span class="math inline">\(F =\overline{\overline{\overline{ABCD} \cdot\overline{\overline{A}\overline{B}\overline{C}\overline{D}}}}\)</span></p><p>总结下来这个第二种方法就是在第一种方法的基础上把内部通过二项式定理进一步化简。</p><h5 id="用或非门设计电路">2.1.2. 用或非门设计电路</h5><p>对于逻辑表达式F = ...中的 <span class="math inline">\(\cdot\)</span>全部换成 + 就好了，按照这个思路，只要在 <spanclass="math inline">\(\cdot\)</span>的头上画两根取反号就行了，最上面那根保留，下面那根负责把 <spanclass="math inline">\(\cdot\)</span> 换成 + 。</p><p>还有第二种通用的方法，就是将F先求对偶，得到<spanclass="math inline">\(F_d\)</span>，这样F就由(xxx) + (xxx) +(xxx)的形式变为(x + x)(x + x)(x +x)的形式了。学过二项式定理吗？同理将<spanclass="math inline">\(F_d\)</span>化简，得到最简“与-或”式(yyy) +(yyy)。再在头上加两根取反，最顶上保留，下面那根为了把 + 变成 <spanclass="math inline">\(\cdot\)</span> ，最后再对偶回去即可。</p><p>上面那段文字是具体过程，流程总结下来如下：</p><ol type="1"><li>对F求对偶<span class="math inline">\(F_d\)</span></li><li>对<spanclass="math inline">\(F_d\)</span>展开，利用二项式原理或者卡诺图，得到最简"与-或"式<spanclass="math inline">\(F_d&#39;\)</span></li><li>对<spanclass="math inline">\(F_d&#39;\)</span>取两次反，最上面保留，下面那根化开，得到<spanclass="math inline">\(F_d&#39;&#39;\)</span></li><li>对<span class="math inline">\(F_d&#39;&#39;\)</span>对偶回去</li></ol><h5 id="用与或非门设计电路">2.1.3. 用与或非门设计电路</h5><p>这个就更简单了，因为给出的函数表达式都是形如F = xyz + xyz +xyz，所以只需要在F头上加两条杠就好了。</p><p>第二种思路就是跟用与非门设计电路的第二种方法一样。加两条杠，最上面不动，下面那个把xyz+ xyz +xyz变成()()()型，然后二项式定理展开即可。（如果是与非门第二种设计思路还要将展开的东西再取两次反）</p><h4 id="多输出电路设计">2.2. 多输出电路设计</h4><p>啊，最直接的想法就是分别把每个输出对应的电路设计出来就好了。但是这样比较憨，当我们化简得到了每个输出对应的逻辑表达式的时候，我们应该能尽可能使每一项<strong>复用</strong>。看下面这个例子：</p><p><img src="6.png" /></p><p>可以发现原<span class="math inline">\(F_1\)</span>中的<spanclass="math inline">\(A\overline{B}\)</span>可以变成<spanclass="math inline">\(A\overline{B}\overline{C}\)</span>，这样就跟<spanclass="math inline">\(F_2\)</span>中的<spanclass="math inline">\(A\overline{B}\overline{C}\)</span>一样了，做到了复用。</p><h4 id="包含无关项的电路设计">2.3. 包含无关项的电路设计</h4><p>其实很简单，看下面这个例子就懂了。</p><p><img src="7.png" /></p><p><img src="8.png" /></p><p>首先我们知道余3码是在8421码的基础上+3得到，因为8421码只有10位，所以余3码也只有10位。而且8421码最小是0000，所以余3码最小是0011（对应十进制数1）。所以这就在输出F中产生了许多无关项d。在画卡诺图时，若不考虑无关项，则把d全置为0；考虑无关项则把d全置为1。最后得到化简后的函数表达式。然后再将这个函数表达式用与非门设计。</p><h4 id="考虑级数的电路设计">2.4. 考虑级数的电路设计</h4><p>也是看一道例题就可以理解了。</p><p><img src="9.png" /></p><p>先用最直接的方法，与或非门直接加两条杠结束。与非门直接加两条杠，下面那条杠化开结束。</p><p>但是这样设计级数会不会多呢？</p><p>如果我们用"与或非门设计电路"中第二种化简方法，试一下：</p><p><span class="math inline">\(F = \overline{\overline{AB +\overline{A}C}} = \overline{\overline{AB} \cdot\overline{\overline{A}C}} = \overline{(\overline{A} + \overline{B})(A +\overline{C})} = \overline{\overline{A}\overline{C} + A\overline{B} +\overline{B}\overline{C}} = \overline{\overline{A}\overline{C} +A\overline{B}}\)</span></p><p>可以发现，这样设计只有3层。但是原来那样直接加两条杠是4层。所以当考虑电路的级数时，在用与或非门设计电路时，可以考虑进一步化简优化电路的级数。</p><p>如果用与非门，就不需要考虑进一步化简了。因为在与非门进一步化简后，还需要再内部再添加两条杠。级数肯定比不继续化简多。</p><h4 id="综合题">2.5. 综合题</h4><ul><li>设计一个组合电路，将8421BCD码变换为余3码。</li></ul><p>先确定输入输出变量，因为8421BCD码是用四个二进制数表示十进制数0~9，所以有四个输入A、B、C、D代表四个二进制数。同理四个输出W、X、Y、Z代表变换后的余3码。</p><p>然后列出真值表，因为BCD只能表示十进制0~9，所以注意表中有无关项d。</p><p><img src="10.png" /></p><p>这里不考虑无关项，所以在后续画卡诺图时都将d置为0。</p><p>因为是四个输出，所以属于多输出电路。所以先画四个卡诺图得到四个逻辑表达式（其实对于Z，发现其很有规律不用画卡诺图都可以知道它就是<spanclass="math inline">\(\overline{D}\)</span>）</p><p>画卡诺图过程省略，得到四个逻辑表达式： <span class="math display">\[W = A + BC + BD \\X = \overline{B}C + \overline{B}D + B\overline{C}\overline{D} \\Y = CD + \overline{C}\overline{D} \\Z = \overline{D}\]</span>此时我们需要思考，是否能做到项的<strong>复用</strong>呢？乍一看没发现能复用的，所以先不考虑复用，继续将式子进一步化简先。先从简单的开始画：</p><p><span class="math inline">\(Z = \overline{D}\)</span></p><p><span class="math inline">\(Y = \overline{C} \oplus D\)</span></p><p><span class="math inline">\(X = \overline{B}(C + D) + B\overline{(C +D)} = B \oplus (C + D) = B \oplus\overline{\overline{C}\overline{D}}\)</span></p><p><span class="math inline">\(W = A + B(C + D) = A +B\overline{\overline{C}\overline{D}}\)</span></p><p>化简后可以发现，<spanclass="math inline">\(\overline{\overline{C}\overline{D}}\)</span>这个东西可以做到复用，真不错。</p><p>接下来就是选择门电路来设计电路了。这里我选择最常用的与非门 +异或门设计电路。根据上面的逻辑表达式直接设计即可（W还需化简一下：<spanclass="math inline">\(W = \overline{\overline{A} \cdot\overline{B\overline{\overline{C}\overline{D}}}}\)</span>）</p><p>最后画出电路：</p><p><img src="11.png" /></p><hr /><h3 id="三.-组合逻辑电路3">三. 组合逻辑电路(3)</h3><h4 id="编码器">3.1 编码器</h4><p>按照我的理解，就是把数字变成二进制数。比如把0 ~8变成3位二进制数，或者0 ~ 15变成4位二进制数。</p><p>编码器分为普通编码器 和 优先编码器。</p><ul><li><strong>普通编码器</strong></li></ul><p>特点：任何时刻只允许输入一个编码信号。</p><p>最常见的普通编码器为8线-3线编码器，如下图：</p><p><img src="12.png" /></p><p>它的真值表如下：</p><p><img src="13.png" /></p><p>可以看出，假如我<spanclass="math inline">\(I_7\)</span>为高电平，则输出111，就是7的二进制。</p><p>那内部电路如何设计呢？根据真值表得出逻辑表达式然后化简，再选用与非门实现即可。</p><p>上面这个是8线-3线普通编码器，那如何实现8421-BCD普通编码器呢？</p><p>很简单，10个输入，4个输出。列出真值表，发现会有无关项。不考虑无关项，根据真值表得出4个输出的逻辑表达式，然后根据卡诺图化简。最后选用与非门实现即可。</p><ul><li><strong>优先编码器</strong></li></ul><p>特点：允许同时输入多个编码信号，只对其中优先权最高的一个进行编码。</p><p>最常见的优先编码器是74148优先编码器，长下面这个样子，需要掌握：</p><p><img src="14.png" /></p><p>这个图有两个要注意的地方，首先就是所有的<spanclass="math inline">\(I\)</span>上面都是有一个取反号的，只是这个图比较小可能看不清晰，然后所有的<spanclass="math inline">\(Y、S\)</span>上面也有取反号。还有就是看到红色箭头的地方了吗？这跟前面的8线-3线普通编码器不一样，这代表低电平有效。</p><p><spanclass="math inline">\(\overline{S}\)</span>为选通输入端，只有当<spanclass="math inline">\(\overline{S} = 0\)</span>时才能正常工作，当<spanclass="math inline">\(\overline{S} =1\)</span>时所有输出端为封锁为高电平。</p><p>​ <img src="15.png" /></p><p><spanclass="math inline">\(\overline{Y_s}\)</span>为选通输出端，当<spanclass="math inline">\(\overline{Y_s} =0\)</span>说明电路正常工作且无编码信号输入（<spanclass="math inline">\(\overline{S} = 0 且所有\overline{I} =1\)</span>）</p><p>​ <img src="16.png" /></p><p><spanclass="math inline">\(\overline{Y_{EX}}\)</span>为扩展端，当<spanclass="math inline">\(\overline{Y_{EX}} =0\)</span>说明电路正常工作且有编码信号输入（<spanclass="math inline">\(\overline{S} = 0\)</span>且存在<spanclass="math inline">\(\overline{I} = 0\)</span>）</p><p>​ <img src="17.png" /></p><p>知道了每个端口的作用，如何只通过输出端判断此时编码器处于什么状态呢？</p><ol type="1"><li><span class="math inline">\(\overline{Y_s} =0\)</span>：电路正常工作且无编码信号输入。（此时<spanclass="math inline">\(\overline{Y_{EX}}\)</span>必为1）</li><li><span class="math inline">\(\overline{Y_{EX}} =0\)</span>：电路正常工作且有编码信号输入。（此时<spanclass="math inline">\(\overline{Y_s}\)</span>必为1）</li><li><span class="math inline">\(\overline{Y_s} = \overline{Y_{EX}} =1\)</span>：电路被阻塞（此时<spanclass="math inline">\(\overline{S}\)</span>必为1）</li></ol><p>最后，74148优先编码器的真值表贴上来，上面所有可能你觉得有困惑的点都可以在这张表中得到解答。</p><p><img src="18.png" /></p><ul><li><strong>练习</strong></li></ul><p>学了上面普通编码器和优先编码器的知识，来写一道题吧！</p><blockquote><p>请用两片74148接成16线-4线优先编码器，将16个低电平输入信号<spanclass="math inline">\(\overline{A_0} \sim\overline{A_{15}}\)</span>编为'0000' ~ '1111'，其中<spanclass="math inline">\(\overline{A_{15}}\)</span>的优先级最高。</p></blockquote><p>首先如果是0 ~7就直接用一片就好了。思考一下，如果是大于7怎么办？可以这样思考：</p><p>15 = 8 + 7</p><p>14 = 8 + 6</p><p>13 = 8 + 5</p><p>12 = 8 + 4</p><p>11 = 8 + 3</p><p>10 = 8 + 2</p><p>9 = 8 + 1</p><p>8 = 8 + 0</p><p>发现规律了吗？如果是0 ~ 7直接用一片就好了，如果是8 ~15就肯定需要用到第二片，但是第二片同样能表达的范围只有0 ~ 7，所以就将8 ~15进行数字拆分。</p><p>如果输入8，则点亮第四位输出（8421中的8），剩下3位二进制输入0</p><p>如果输入9，则点亮第四位输出，剩下3位二进制输入1</p><p>如果输入10，则点亮第四位输出，剩下3位二进制输入2</p><p>... ...</p><p>如果输入15，则点亮第四位输出，剩下3位二进制输入7</p><p>思路就是这样，还有一些小细节我在放答案过后再解释：</p><p><img src="19.png" /></p><p>可以看到<spanclass="math inline">\(G_0、G_1、G_2\)</span>门都采用了与非门的设计，因为两片74148必定只会用到一片的输出（0~ 7用右边那片，8 ~ 15用左边那片）。</p><p>但是如果使得一片工作另一片就停止工作呢？注意左边那片的<spanclass="math inline">\(\overline{Y_s}\)</span>端口，左边那片正常工作且有信号输入时输出1，使得右边那片<spanclass="math inline">\(\overline{S} =1\)</span>，所以右边那片直接被堵塞了。如果左边那片正常工作但没信号输入时输出0，使得右边那片被激活。这样就实现了两片中只能有一片在工作。</p><p>然后<spanclass="math inline">\(Z_3\)</span>就是第四个二进制输出。只要用到左边那片，就输出1。刚好<spanclass="math inline">\(\overline{Y_{EX}}\)</span>就可以实现这个功能，只要电路正常工作并且有信号输入<spanclass="math inline">\(\overline{Y_{EX}}\)</span>就为0，经过一个与非门之后就变成了1。</p><h4 id="译码器">3.2 译码器</h4><p>译码器就是编码器的逆过程。编码器是给它一个数字，输出二进制。译码器就是给它一个二进制，输出一个数字。</p><p>译码器分为二进制译码器（最小项译码器）、二—十进制译码器、显示译码器。其中二进制译码器需要掌握74138译码器。</p><ul><li><strong>二进制译码器（只讲74138译码器）</strong></li></ul><p>74138译码器长这个样子：</p><p><img src="20.png" /></p><p>注意，跟74148解码器不同，这里的三个输入端<spanclass="math inline">\(A\)</span>都是高电平有效，输出端<spanclass="math inline">\(\overline{Y}\)</span>是低电平有效。这里的<spanclass="math inline">\(S、\overline{S}\)</span>是控制芯片是否工作的。</p><p>具体来说，只有当<span class="math inline">\(S_1 = 1 且 \overline{S_2}=0 且 \overline{S_3} =0\)</span>时，电路才处于正常工作状态。其余情况电路都处于被堵塞的状态。</p><p>​ <img src="21.png" /></p><p>74138解码器的真值表如下：</p><p><img src="22.png" /></p><ul><li><strong>二—十进制译码器（只讲7442译码器）</strong></li></ul><p>我觉得二—十进制译码器就是二进制译码器啊......搞不懂为啥还要专门分个类出来。二—十译码器就是说将4个二进制数变成十进制0~ 9。</p><p>二—十进制译码器最常见的就是7442译码器，它的真值表如下：</p><p><img src="23.png" /></p><p>可以看到有伪码的存在，这是为什么呢？因为4个二进制数可以表达0 ~15，但是因为是BCD码，所以我们得到的数范围是0 ~9。所以有一部分的二进制状态没有用到，没用到的地方就称为伪码。</p><ul><li><strong>显示译码器</strong></li></ul><p>啊就是能直观的显示出翻译后信息的译码器。看下面俩图就知道它是什么东西了。</p><p><img src="24.png" /><img src="25.png" /></p><ul><li><strong>练习</strong></li></ul><blockquote><p>试用两片74138组成4线-16线译码器。将输入的4位二进制代码<spanclass="math inline">\(D_3D_2D_1D_0\)</span>译成16个独立的低电平信号<spanclass="math inline">\(\overline{Z_0} \sim\overline{Z_{15}}\)</span>。</p></blockquote><p>有了前面用两块74148组成16线-4线编码器的经验，这题的思考方式是一样的。首先如果只用一块板的话，3个二进制数，可以得到0~ 7。如果大于7怎么办呢？观察一下： <span class="math display">\[(8)_d = (1000)_b \leftrightarrow (0)_d = (000)_b \\(9)_d = (1001)_b \leftrightarrow (1)_d = (001)_b \\(10)_d = (1010)_b \leftrightarrow (2)_d = (010)_b \\..... \leftrightarrow ...\]</span> 发现规律了没？</p><p>只要四位二进制中第四位为0，将剩下3位二进制传给第一块板的三个输入接口。如果第四位二进制为1，那么堵塞第一块版，将剩下3位二进制传给第二块版的三个输入接口。答案如下：</p><p><img src="26.png" /></p><h4 id="用译码器实现逻辑函数">3.3 用译码器实现逻辑函数</h4><p>因为任何逻辑函数均可化成最小项之和的形式。所以可以用译码器实现逻辑函数的电路，很牛逼。看下面这个例子你就懂了。</p><p><img src="27.png" /></p><p>首先先将F化成主析取范式：<span class="math inline">\(F = ABC+AB\overline{C} + A\overline{B}C + \overline{A}BC = m_7 + m_6 + m_5 +m_3\)</span></p><p>意思是说，只要三输入变量按照7、6、5、3的二进制输入，F就是1。否则F就是0。</p><p>好，那我们在74138输出端将<spanclass="math inline">\(\overline{Y_7}、\overline{Y_6}、\overline{Y_5}、\overline{Y_3}\)</span>用与非门连接起来。只要三输入变量输入7、6、5、3二进制其中的一个，那么<spanclass="math inline">\(\overline{Y_7}、\overline{Y_6}、\overline{Y_5}、\overline{Y_3}\)</span>就有一个是0，与非后就得到1。如果三输入变量不属于7、6、5、3二进制中的任何一个，则<spanclass="math inline">\(\overline{Y_7}、\overline{Y_6}、\overline{Y_5}、\overline{Y_3}\)</span>都为1，与非后就得到0。</p><hr /><h3 id="四.-组合逻辑电路4">四. 组合逻辑电路(4)</h3><h4 id="数据分配器">4.1 数据分配器</h4><p>定义：数据传输过程中，有时需要将数据分配到不同的数据通道上。数据分配器也叫多路分配器，简称DEMUX。</p><p>示意图：通过A端口来选择数据输出通道。</p><p><img src="28.png" /></p><p>电路图：</p><p><img src="29.png" /></p><p>这个电路还是蛮简单的。</p><p>提一嘴，前面学到的74138译码器就可以用来作1路-8路数据分配器。内部电路图ppt没给，但是我觉得就跟上面DEMUX的电路图差不多。</p><p><img src="30.png" /></p><h4 id="数据选择器">4.2 数据选择器</h4><p>定义：能够实现从多路数据中选择一路进行传输的电路叫做数据选择器。也叫多路选择器、多路调制器，简称MUX。常见的类型有二选一、四选一、八选一、十六选一。</p><p><img src="31.png" /></p><ul><li><strong>二选一多路选择器</strong></li></ul><p><img src="32.png" /></p><p>w0和w1分别是两路的数据源，然后s是控制器。先看右边的电路图，假设s是0，则f= w0，假设s是1，则f = w1。左边就是二选一MUX的图形符号。</p><ul><li><strong>四选一多路选择器</strong></li></ul><p>先看真值表，根据真值表就可以直接设计电路了。</p><p><img src="33.png" /></p><p>所以根据上面的真值表可以写出逻辑表达式：</p><p><span class="math inline">\(f = w_0\overline{s_1}\overline{s_0} +w_1\overline{s_1}s_0 + w_2s_1\overline{s_0} + w_3s_1s_0\)</span></p><p>下面右图是用非门 + 与门 +或门来实现上面的逻辑表达式，左图是四选一MUX的图形符号</p><p><img src="34.png" /></p><ul><li><strong>更大规模的多路选择器</strong></li></ul><p>可以直接列真值表然后直接构建，也可以用小规模的多路选择器去构建。</p><p>看一个由2选1多路选择器构建的4选1多路选择器，就知道如何构建了。</p><p><img src="35.png" /></p><p>先将w俩俩分组，然后用s0去筛，一下筛掉一半，再用s1去筛，又筛掉一半，最后就选择出来了一路数据。</p><h4 id="数据选择器的运用">4.3 数据选择器的运用</h4><ol type="1"><li><p>2x2纵横开关（是否交换数据传输通道）</p><p><img src="36.png" /></p><ul><li>看图，s是选择器。如果s=0，则y1 = x1, y2 = x2。如果s=1，则y1 = x2，y2= x1。</li></ul></li><li><p>实现逻辑函数</p><ul><li><p>最暴力的想法就是列真值表，输入变量A、B、C就是选择器s。每一行的输出就是数据输入通道，输出通道就是f。例如函数<spanclass="math inline">\(f = \overline{w_1}w_2 +w_1\overline{w_2}\)</span>，用四选一多路选择器的实现如下：</p><p><img src="38.png" /></p></li><li><p>但在暴力的基础上其实可以优化：可以对真值表做一个改动：</p><p><img src="39.png" /></p></li><li><p>这样子输入变量只有一个w1了，它就是选择器。数据输入通道有两个，分别是<spanclass="math inline">\(w_2\)</span>和<spanclass="math inline">\(\overline{w_2}\)</span>，数据输出通道一个为f。用二选一多路选择器实现如下：</p><p><img src="40.png" /></p></li></ul></li><li><p>实现3输入表决器</p><ul><li><p>先列出真值表</p><p><img src="41.png" /></p></li><li><p>对真值表进行优化</p><p><img src="42.png" /></p></li><li><p>此时输入变量两个w1、w2为选择器，数据输入通道4个分别是0、w3、w3、1，数据输出通道1个为f。用4选1多路选择器实现如下：</p><p><img src="43.png" /></p></li></ul></li><li><p>实现3位异或运算</p><ul><li><p>先列出真值表，并优化</p><p><img src="44.png" /></p></li><li><p>此时输入变量两个w1、w2为选择器，数据输入通道4个分别是<spanclass="math inline">\(w_3、\overline{w_3}、\overline{w_3}、w_3\)</span>，数据输出通道一个为f。用4选1多路选择器实现如下：</p><p><img src="45.png" /></p></li></ul></li></ol><hr /><h3 id="五.-组合逻辑电路5">五. 组合逻辑电路(5)</h3><p>这一节比较杂，主要是对第（4）内容的一个补充。具体来说，讲了如下内容：</p><ol type="1"><li>用香农展开定理搭配多路选择器实现逻辑函数</li><li>八选一数据选择器74151</li><li>双四选一数据选择器74153</li><li>数据选择器的更多运用</li></ol><h4 id="用香农展开定理搭配多路选择器实现逻辑函数">5.1用香农展开定理搭配多路选择器实现逻辑函数</h4><ul><li><p>香农展开定理：</p><ul><li><p><span class="math inline">\(f\left(w_{1}, w_{2}, \ldots . .w_{\mathrm{n}}\right)=\overline{w_{1}} f\left(0, w_{2}, \ldots . .w_{\mathrm{n}}\right)+w_{1} f\left(1, w_{2}, \ldots . .w_{\mathrm{n}}\right)\)</span></p><ul><li><p>↑展开一个变量</p></li><li><p>在香农表达式中<spanclass="math inline">\(f\left(0,w_{2}....w_{\mathrm{n}}\right)\)</span>项称为对应于<spanclass="math inline">\(\bar{w}_{\mathrm{1}}\)</span>的<spanclass="math inline">\(f\)</span>的余因子式, 简写做<spanclass="math inline">\(f_{\overline{w}_1}\)</span>。 同样的,<spanclass="math inline">\(f(1,w_2.....w_n)\)</span> 项称为对应于<spanclass="math inline">\(w_{_1}\)</span>的<spanclass="math inline">\(f\)</span>的余因子式,简写做<spanclass="math inline">\(f_{_{w_1}}\)</span>。所以香农展开定理可以简写成：<span class="math display">\[f=\overline{w}_{1}f_{\overline{w}_{1}}+w_{1}f_{w_{1}}\]</span></p></li></ul></li><li><p><span class="math inline">\(f(w_1,w_2,....,w_n)=\\\overline{w_1}\overline{w_2}f(0,0,w_3....w_n)+\overline{w_1}w_2f(0,1,w_3,.....w_n)+w_1\overline{w_2}f(1,0,w_3,.....w_n)+\\ w_1w_2f(1,1,w_3,.....w_n)\)</span></p><ul><li>↑展开多个变量</li></ul></li></ul></li></ul><p>那如何用香农展开定理实现逻辑函数呢？举个例子，比如<spanclass="math inline">\(f=\overline{w}_{1}\overline{w}_{3}+w_{1}w_{2}+w_{1}w_{3}\)</span></p><p>将f以w1用香农展开定理展开，得到<spanclass="math inline">\(f=\overline{w}_1f_{\overline{w}_1}+w_1f_{w_1}=\overline{w}_1(\overline{w}_3)+w_1(w_2+w_3)\)</span></p><p>然后选用二路选择器，w1是选择器，数据输入通道2个分别是<spanclass="math inline">\(\overline{w_3}\)</span>和<spanclass="math inline">\(w_2 +w_3\)</span>，数据输出通道一个为f。实现电路图如下：</p><p><img src="46.png" /></p><p>同理，如果用香农展开定理展开两个变量，则搭配一个四路选择器也可以实现上述函数f。</p><h4 id="八选一数据选择器74151">5.2 八选一数据选择器74151</h4><p>74151MUX的样子和真值表如下图</p><p><img src="47.png" /></p><h4 id="双四选一数据选择器74153">5.3 双四选一数据选择器74153</h4><p>就是俩独立的四路选择器放一起，如图。（个人觉得左图很不直观，下面练习中的74153比较直观）</p><p><img src="48.png" /></p><blockquote><p>练习：如何用74153构建一个74151？</p></blockquote><p>很简单，跟以前练习题一样的套路。只要保证两个四选一板子有且只能有一块板子在工作就行了。看答案吧，很简单。</p><p><img src="49.png" /></p><p>A2还有G1就是为了实现”只能有一个四选一“板子在工作我们自己加上去的电路。</p><h4 id="小补充">5.4 小补充</h4><p>感觉代号多了有点乱了。让我来梳理一下。</p><p>74148是最常见的8线-3线优先编码器。</p><p>74138是最常见的二进制译码器。（3个输入、8个输出）</p><p>数据分配器DEMUX可用74138实现。</p><p>数据选择器MUX有74151（八路）、74153（俩独立四路放一起）</p><h4 id="数据选择器的更多运用">5.5 数据选择器的更多运用</h4><ol type="1"><li><p>与DEMUX实现多路信号分时传送</p><p><img src="50.png" /></p></li><li><p>实现逻辑函数</p><ul><li><p>用MUX实现逻辑函数的方法有许多。</p><ol type="1"><li>直接列真值表实现</li><li>列完真值表，对真值表优化后实现</li><li>用香农展开公式后实现</li><li>列引入变量的卡诺图实现</li></ol></li><li><p>前三种方法前面都介绍过了，这里放一个用第四种方法的例题。</p><p><img src="51.png" /></p></li><li><p>因为74151是八位选择器，所以只能有3个选择变量。所以画卡诺图引入了一个变量。然后8个信号输入端口就输入0/1/D/<spanclass="math inline">\(\overline{D}\)</span>即可。</p></li><li><blockquote><p>练习：请用一片74151实现逻辑函数<spanclass="math inline">\(F(A,B,C,D,E)=A\overline{B}C\overline{D}E+AB\overline{C}\overline{D}\overline{E}+A\overline{B}C\overline{D}\overline{E}+\overline{A}\overline{B}\overline{C}DE+\overline{A}B\overline{C}\overline{D}\overline{E}\)</span></p></blockquote></li><li><p>74151是八路选择器，所以要有三个选择变量。但是这里F有5个，所以第一想法是用香农展开定理展开3个变量，但是这样太麻烦了。所以用第四种方法，引入两个变量进卡诺图即可。</p><p><img src="52.png" /></p></li></ul></li><li><p>数据选择器的扩展</p><ul><li><p>很好理解，看图即可。</p><p><img src="53.png" /></p></li></ul></li></ol><hr /><h3 id="六.-组合逻辑电路6">六. 组合逻辑电路(6)</h3><h4 id="数值比较器">6.1 数值比较器</h4><ul><li><strong>一位数值比较器</strong></li></ul><p>两个1位二进制数A,B相比的情况有以下几种: 1. A&gt;B，则<spanclass="math inline">\(A\overline{B}=1\)</span>，所以可用<spanclass="math inline">\(A\overline{B}\)</span>作为A&gt;B的输出信号<spanclass="math inline">\({Y}_{(A&gt;B)}\)</span> 。<br />2. 同理可用 <span class="math inline">\(\overline{AB}\)</span>作为A&lt;B的输出信号 <span class="math inline">\({Y}_{(A&lt;B)}\)</span>。 3. 同理可用<span class="math inline">\(A \odot B\)</span>作为A=B的输出信号 <span class="math inline">\(Y_{A=B}\)</span></p><p>于是可以设计出如下电路（注意是低电平有效）</p><p><img src="54.png" /></p><ul><li><strong>多位数值比较器</strong></li></ul><p>多位数值比较器的原理就是从高位到低位逐位比较，最常见的是4位比较器14585，下面是其逻辑函数和电路图：</p><p><img src="55.png" /></p><p><img src="56.png" /></p><p>这个图有4个要注意的地方，首先看蓝色箭头的地方，为啥这个地方用与非门呢？很简单，将上面的逻辑表达式进行进一步化简：<span class="math display">\[Y_{A&lt;B} = \overline{\overline{\overline{A_3}B_3} \cdot\overline{\overline{A_3 \oplus B_3}\overline{A_2}B_2} \cdot ...} \,\cdot I_{A&lt;B}  \\= \overline{\overline{\overline{A_3}B_3} \cdot ((A_3 \oplus B_3) +\overline{\overline{A_2}B_2}) \cdot \, ...} \, \cdot I_{A&lt;B}\]</span> 现在知道蓝色箭头为啥用与非门了吧=w=。</p><p>那为啥绿色箭头那要用或门呢？还是看上面化简的式子，注意看第二项，第二项就是或门=w=。</p><p>那为啥棕色箭头用或非门呢？还是化简上面的式子： <spanclass="math display">\[Y_{A=B} = \overline{(A_3 \oplus B_3) + (A_2 \oplus B_2) + (略) + (略)}\, \cdot I_{A=B}\]</span>很清楚吧=w=，就是一个或非门，每一项这里用异或表达了，其实就是图中判断是否每一项是否相等的那个逻辑门。</p><p>那为啥红箭箭头那要用或非门呢？还是化简上面的式子： <spanclass="math display">\[Y_{A&gt;B} = \overline{(Y_{A&lt;B} + Y_{A=B}) + \overline{I_{A&gt;B}}}\]</span> easy。</p><p>还剩一个问题，那三个<spanclass="math inline">\(I\)</span>是干啥的。其实就是用来接收低位上的结果的。这样两块14585就能实现8位数字的比较。如下图：</p><p><img src="57.png" /></p><p>有个问题，为啥左边的<spanclass="math inline">\(Y_{A&gt;B}\)</span>为啥不能连到右边的<spanclass="math inline">\(I_{A=B}\)</span>？</p><p>其实可以，但是图中这样连也没问题。还是用逻辑表达式去解释：<spanclass="math inline">\(Y_{A&gt;B} = \overline{(Y_{A&lt;B} + Y_{A=B}) +\overline{I_{A&gt;B}}}\)</span>，可以发现必须要三者都是0才会使得<spanclass="math inline">\(Y_{A&gt;B}=1\)</span>，所以默认给<spanclass="math inline">\(I_{A&gt;B}\)</span>置为1不影响结果。</p><h4 id="加法器">6.2 加法器</h4><ul><li><strong>半加器</strong></li></ul><p>很简单，真值表、逻辑表达式、图形符号如下图：</p><p><img src="58.png" /></p><ul><li><strong>全加器</strong></li></ul><p>加了一个考虑上一位进位而已，也很简单，真值表、逻辑表达式、图形符号如下：</p><p><img src="59.png" /></p><p>这里解释一下逻辑表达式，因为异或是不进位加法，所以S等于三者异或很合理。然后CO用或连接也很合理，无非就是A、B都是1可以进位，或者CI为1，A、B里任意一个为1也可以进位。</p><ul><li><strong>串行进位加法器</strong></li></ul><p>有了全加器之后，只需要将多个全加器串联起来就可以得到任意多位的加法器了。如下图：</p><p><img src="60.png" /></p><p>虽然这样逻辑和电路都很简单，但是存在一个问题，就是速度过慢，如何解决呢？</p><p>速度关键是慢在进行信号逐级传递的过程，所以要优化这个过程。不难发现，要想知道<spanclass="math inline">\(CI_i\)</span>，只需要知道<spanclass="math inline">\(A_{i-1}A_{i-2}...A_0\)</span>和<spanclass="math inline">\(B_{i-1}B_{i-2}...B_0\)</span>即可。</p><p>个人觉得，这种优化思路就很像把递归函数展开来写了笑死。也有点像并查集路径压缩。</p><ul><li><strong>超前进位加法器</strong></li></ul><p>用上面提到的优化方法做成的加法器就叫做超前进位加法器。下图是74283的超前进位加法器电路图：</p><p><img src="61.png" /></p><p>可以发现光4位加法器电路就那么复杂了，这或许就是空间换时间吧（笑）</p><p>所以当我们需要更多位加法器的时候，可以拿74283超前进位加法器去串联做成一个多位的串行进位加法器。</p><blockquote><p>练习：用一片74283设计将BCD8421码转换成余3码的电路</p></blockquote><p>太简单啦！直接上图：</p><p><img src="62.png" /></p><h4 id="竞争-冒险现象">6.3 竞争-冒险现象</h4><p>啊我懒得打很多字了，这里我放一个up主的视频，看完这道例题就知道什么是竞争-冒险现象了：（up主：海蓬莱）</p><video src="video.mp4" controls="controls"></video><p>视频中的险象就是这里的冒险。官方定义如下 ：</p><p>竞争：一个逻辑门的两个输入端的信号同时向相反方向变化，而变化的时间有差异的现象。</p><p>冒险：由于竞争而使电路输出发生瞬时错误</p><p>注意，有竞争不一定会冒险（如视频中提到的非临界竞争）</p><p>冒险分为两类：</p><ol type="1"><li>0型冒险：即本来是1的变成了0<ul><li>当表达式在一定条件下能化成<span class="math inline">\(F = A +\overline{A}\)</span>时，就会出现0型冒险</li></ul></li><li>1型冒险：即本来是0的变成了1<ul><li>当表达式在一定条件下能化成<span class="math inline">\(F = A \cdot\overline{A}\)</span>时，就会出现1型冒险</li></ul></li></ol><p>如何能消除竞争-冒险现象呢？ppt上给出了三种解决方案：</p><ol type="1"><li><p>接入滤波电容</p></li><li><p>引入选通脉冲</p></li><li><p>修改逻辑表达式</p><ul><li>前俩个反正我是没看懂，这里举个例子说一下第三种方法。比如有逻辑函数<spanclass="math inline">\(F = AB + \overline{A}C\)</span>，当B = C =1时会出现0型冒险。所以可以修改一下逻辑表达式为：<spanclass="math inline">\(F = AB + \overline{A}C +BC\)</span>，这样就不会出现0型冒险了。（为什么要这么修改呢？看下面的卡诺图你就知道了）</li></ul><p><img src="63.png" /></p></li></ol><hr /><h3 id="七.-vivado的基本使用">七. Vivado的基本使用</h3><p>先来了解一下EDA技术：即电子设计自动化，其依赖功能强大的计算机，在EDA工具软件平台上，对以硬件描述语言(HDL)为系统逻辑描述手段完成的设计文件，自动地完成逻辑编译、逻辑化简、逻辑分割、逻辑综合、布局布线，以及逻辑优化和仿真测试，直至物理实现既定的电子设计系统功能。</p><p>以我浅薄的理解，EDA = IDE，Verilog =C++，hhhhh，FPGA是可编程逻辑器件。</p><h4 id="用verilog-hdl设计电路">用Verilog HDL设计电路</h4><p>写一个模块大致分为以下几步：</p><ol type="1"><li>打开Vivado，创建一个项目（根据自己开发板选型号，我的是xc7a35tcpg236-1）</li><li>新建一个design文件，在里头写程序</li><li>新建一个sim文件，在里头写仿真程序（初始化 + 实例化 +仿真过程代码）</li><li>运行仿真，观察仿真结果是否跟设想一样</li><li>封装IP核，以便此模块以后可被其它项目使用</li></ol><h4 id="用block-design设计电路">用Block Design设计电路</h4><ol type="1"><li>打开Vivado，创建一个项目</li><li>左侧新建一个Block Design项目</li><li>引入IP核，开始画图</li><li>新建一个sim文件，写仿真程序</li><li>运行仿真，观察仿真结果是否跟设想一样</li></ol><h4 id="用rtl看电路图">用RTL看电路图</h4><p>点左侧RTL分析即可生成。</p><h4 id="下板">下板</h4><ol type="1"><li>写好constraint文件（我直接用的老师给的模板文件上修改）</li><li>运行左侧Synthesis</li><li>运行Implementation（记得勾选第二项产生二进制文件，然后选择OpenHardware Manager）</li><li>通过USB连上FPGA</li><li>点击Auto Connect，连接成功后选择ProgramDevice下载刚才的二进制文件</li><li>可以愉快的用板子观察程序结果啦~</li></ol><p>但是断电后程序就会丢失，为了解决这个问题，需要把程序烧录进ROM里：</p><ol type="1"><li>生成bin文件，Tools -&gt; Settings -&gt; Bitstream -&gt;勾选-bin-file* -&gt; OK，左侧GenerateBitstream重新生成bit文件（此时就会生成bin文件）</li><li>右键芯片选择Add Configuration Memory Device，选择合适的闪存型号</li></ol><h4 id="总结">总结</h4><p>Vivado这个软件其实蛮简单使用的。首先不考虑板子的话，只在电脑上设计电路有两种方法，第一种就是直接创建design文件写，第二种就是用BlockDesign（若某个模块想封装成IP核必须要仿真过先）。然后想看设计的对不对，就创建仿真文件来看。另外，用RTL可以看设计好的电路。</p><p>下板的话就需要通过constraint文件指定管脚，然后左侧Synthesis +Implementation + 生成二进制文件 + 连板子 + Auto Connect + ProgramDevice就可以在板子上观察了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;写于2023/10/6，这门课其实还是有点意思的。但是上个月身体原因一直在关心我自己的身体，所以这门课我全翘掉了，一点没听。现在马上就要实验课了，于是打算在国庆的末尾把这门课学了。目的是能做出几个组合逻辑电路的实验项目。&lt;/p&gt;
&lt;p&gt;自学参考的内容为老师ppt、各种网上博客。&lt;/p&gt;
&lt;p&gt;学完后打算去刷题巩固一下，刷题打算在一个up主视频里刷：&lt;a
href=&quot;https://www.bilibili.com/video/BV1H54y1k7kM?p=1&amp;amp;vd_source=2501060da9b4bef86e2b8ec8a8d880b5&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后，如果有朋友打算认真看这篇Blog进行学习的话，为了更好的阅读体验建议开梯子，因为本文有许多图片和一个视频。（存储在github中）&lt;/p&gt;</summary>
    
    
    
    <category term="大学" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    <category term="数字逻辑" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/"/>
    
    
  </entry>
  
  <entry>
    <title>3. 几种重要的凸集-下</title>
    <link href="http://example.com/2023/10/05/3-%E5%87%A0%E7%A7%8D%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%B8%E9%9B%86-%E4%B8%8B/"/>
    <id>http://example.com/2023/10/05/3-%E5%87%A0%E7%A7%8D%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%B8%E9%9B%86-%E4%B8%8B/</id>
    <published>2023-10-05T06:30:39.000Z</published>
    <updated>2023-10-05T07:01:38.304Z</updated>
    
    <content type="html"><![CDATA[<p>介绍了多面体、单纯形、多面体与单纯形的关系、对称矩阵集合、对称半正定矩阵集合、对称正定矩阵集合。</p><span id="more"></span><p><img src="1.jpg" /></p><p><img src="2.jpg" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍了多面体、单纯形、多面体与单纯形的关系、对称矩阵集合、对称半正定矩阵集合、对称正定矩阵集合。&lt;/p&gt;</summary>
    
    
    
    <category term="凸优化" scheme="http://example.com/categories/%E5%87%B8%E4%BC%98%E5%8C%96/"/>
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%87%B8%E4%BC%98%E5%8C%96/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2. 几种重要的凸集-上</title>
    <link href="http://example.com/2023/10/05/2-%E5%87%A0%E7%A7%8D%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%B8%E9%9B%86-%E4%B8%8A/"/>
    <id>http://example.com/2023/10/05/2-%E5%87%A0%E7%A7%8D%E9%87%8D%E8%A6%81%E7%9A%84%E5%87%B8%E9%9B%86-%E4%B8%8A/</id>
    <published>2023-10-05T06:30:21.000Z</published>
    <updated>2023-10-05T07:01:30.784Z</updated>
    
    <content type="html"><![CDATA[<p>介绍了一个点、空集、超平面、半空间、球、椭球。</p><span id="more"></span><p><img src="1.jpg" /></p><p><img src="2.jpg" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍了一个点、空集、超平面、半空间、球、椭球。&lt;/p&gt;</summary>
    
    
    
    <category term="凸优化" scheme="http://example.com/categories/%E5%87%B8%E4%BC%98%E5%8C%96/"/>
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%87%B8%E4%BC%98%E5%8C%96/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>1. 仿射集/凸集/凸锥</title>
    <link href="http://example.com/2023/10/05/1-%E4%BB%BF%E5%B0%84%E9%9B%86-%E5%87%B8%E9%9B%86-%E5%87%B8%E9%94%A5/"/>
    <id>http://example.com/2023/10/05/1-%E4%BB%BF%E5%B0%84%E9%9B%86-%E5%87%B8%E9%9B%86-%E5%87%B8%E9%94%A5/</id>
    <published>2023-10-05T06:30:01.000Z</published>
    <updated>2023-10-05T07:01:23.606Z</updated>
    
    <content type="html"><![CDATA[<p>介绍了仿射集、凸集、凸锥的概念，以及三者之间的联系。</p><span id="more"></span><p><img src="1.jpg" /></p><p><img src="2.jpg" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍了仿射集、凸集、凸锥的概念，以及三者之间的联系。&lt;/p&gt;</summary>
    
    
    
    <category term="凸优化" scheme="http://example.com/categories/%E5%87%B8%E4%BC%98%E5%8C%96/"/>
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%87%B8%E4%BC%98%E5%8C%96/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>0. 引言</title>
    <link href="http://example.com/2023/10/05/0-%E5%BC%95%E8%A8%80/"/>
    <id>http://example.com/2023/10/05/0-%E5%BC%95%E8%A8%80/</id>
    <published>2023-10-05T06:29:39.000Z</published>
    <updated>2023-10-05T07:01:08.954Z</updated>
    
    <content type="html"><![CDATA[<p>凸优化系列是我在23年10月开启的一项计划。主要是读论文发现需要凸优化的知识，奈何我才刚上大二没有学到这门课程。</p><p>于是打算自学，参考的教程是<ahref="https://www.bilibili.com/video/BV19M411T7S7?p=1&amp;vd_source=2501060da9b4bef86e2b8ec8a8d880b5">中科大凌青老师的教学视频</a>。</p><p>文中的笔记是我看完课程后的思考与总结，可能有错误还请指出！我速速修改=w=</p><span id="more"></span><p><img src="1.jpg" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;凸优化系列是我在23年10月开启的一项计划。主要是读论文发现需要凸优化的知识，奈何我才刚上大二没有学到这门课程。&lt;/p&gt;
&lt;p&gt;于是打算自学，参考的教程是&lt;a
href=&quot;https://www.bilibili.com/video/BV19M411T7S7?p=1&amp;amp;vd_source=2501060da9b4bef86e2b8ec8a8d880b5&quot;&gt;中科大凌青老师的教学视频&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;文中的笔记是我看完课程后的思考与总结，可能有错误还请指出！我速速修改=w=&lt;/p&gt;</summary>
    
    
    
    <category term="凸优化" scheme="http://example.com/categories/%E5%87%B8%E4%BC%98%E5%8C%96/"/>
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%87%B8%E4%BC%98%E5%8C%96/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>在VS Code中配置C/C++</title>
    <link href="http://example.com/2023/10/03/%E5%9C%A8VS-Code%E4%B8%AD%E9%85%8D%E7%BD%AEC-C/"/>
    <id>http://example.com/2023/10/03/%E5%9C%A8VS-Code%E4%B8%AD%E9%85%8D%E7%BD%AEC-C/</id>
    <published>2023-10-03T05:34:01.000Z</published>
    <updated>2023-10-03T05:41:30.024Z</updated>
    
    <content type="html"><![CDATA[<p>之前因为学了一点html，所以下了一个VS Code来写html代码。</p><p>今天要写C++的代码，以前都是用VS写的。但是突然想了一下既然都装了VSCode，为啥不配置一下。配置好了后以后写C/C++代码也不用打开繁重的VS了。而且VSCode还能加很多插件。</p><span id="more"></span><p>说干就干，上网找了资料，终于配置好了。还是有蛮多坑的，主要是因为网上的教程大部分版本比较老了。所以我来写个教程，方便别人和以后自己在别的电脑上配置。我总结出以下几步：</p><h3 id="下载mingw-w64并配置系统变量">1. 下载MinGW-w64并配置系统变量</h3><ul><li><p>MinGW是是将经典的开源 C语言 编译器 GCC 移植到了 Windows平台下，并且包含了 Win32API ，因此可以将源代码编译为可在 Windows中运行的可执行程序。</p></li><li><p>但是MinGW的很早就停止维护了，版本很老了。</p></li><li><p>MinGW-w64相当于升级版的MinGW，是一个开源项目，不断在更新维护着。</p></li><li><p><ahref="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">下载链接</a>，划到最下面，选择“MinGW-W64GCC-8.1.0”下的“x86_64-win32-seh”进行下载。</p></li><li><p>下载好后，解压到自己想要的位置。然后将其中的bin路径配置到系统变量中。</p></li><li><p>打开cmd，输入gcc --version和gdb--version，弹出版本信息就说明这一步完成了。</p></li></ul><h3 id="下载插件cccode-runner">2. 下载插件C/C++，Code Runner</h3><ul><li>在VS Code中下载即可。</li></ul><h3 id="配置文件">3. 配置文件</h3><ul><li><p>新建一个项目文件夹，在下面建立一个.vscode文件夹，下面建立三个文件，launch.json，tasks.json，c_cpp_properties.json，然后依次把我的代码复制进去。注意代码中的“（改为自己的路径）”</p></li><li><p>lauch.json</p></li></ul><p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C++ Launch (GDB)&quot;</span><span class="punctuation">,</span>                </span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span>                         </span><br><span class="line"><span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span>                        </span><br><span class="line"><span class="attr">&quot;targetArchitecture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;x86&quot;</span><span class="punctuation">,</span>                </span><br><span class="line"><span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span>                 </span><br><span class="line"><span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span><span class="string">&quot;D:\\app\\mingw64\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line"><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span>     </span><br><span class="line"><span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>                  </span><br><span class="line"><span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">,</span>                  </span><br><span class="line"><span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                  </span><br><span class="line"><span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/app/mingw64/bin/g++.exe&quot;</span>  （改为自己的路径）          </span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><ul><li>tasks.json</li></ul><p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/app/mingw64/bin/g++.exe&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-g&quot;</span><span class="punctuation">,</span><span class="string">&quot;-std=c++11&quot;</span><span class="punctuation">,</span><span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span><span class="string">&quot;-o&quot;</span><span class="punctuation">,</span><span class="string">&quot;$&#123;workspaceRoot&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fileLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;relative&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;severity&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/app/mingw64/bin/g++.exe&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/app/mingw64/bin/g++.exe&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-std=c++11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceRoot&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;fileLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;relative&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;severity&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><ul><li>c_cpp_properties.json</li></ul><p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win32&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">                <span class="string">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">                <span class="string">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">                <span class="string">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">                <span class="string">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include//c++/tr1&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">                <span class="string">&quot;D:/app/mingw64/x86_64-w64-mingw32/include&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;__GNUC__=6&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;__cdecl=__attribute__((__cdecl__))&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;msvc-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="string">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">                    <span class="string">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">                    <span class="string">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">                    <span class="string">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">                    <span class="string">&quot;D:/app/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include//c++/tr1&quot;</span><span class="punctuation">,</span>  （改为自己的路径）</span><br><span class="line">                    <span class="string">&quot;D:/app/mingw64/x86_64-w64-mingw32/include&quot;</span>  （改为自己的路径）</span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\VC\\Tools\\MSVC\\14.36.32532\\bin\\Hostx64\\x64\\cl.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><ul><li><p>在项目文件夹中新建cpp文件，随便写一个程序。然后F5调试。</p></li><li><p>如果能输出正确结果就没问题。如果不能，比如std或者cout报错的话，就打开设置，在"C/C++"中找到C_Cpp:intelliSense Engine，将默认的“Default”改为“Tag Parser”。</p></li><li><p>此时按F5就可以正常实现调试功能了。</p></li><li><p>其实如果你不用调试的话，直接Ctrl + F5用CodeRunner跑代码就行了。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前因为学了一点html，所以下了一个VS Code来写html代码。&lt;/p&gt;
&lt;p&gt;今天要写C++的代码，以前都是用VS写的。但是突然想了一下既然都装了VS
Code，为啥不配置一下。配置好了后以后写C/C++代码也不用打开繁重的VS了。而且VS
Code还能加很多插件。&lt;/p&gt;</summary>
    
    
    
    <category term="杂项" scheme="http://example.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>个人博客搭建说明</title>
    <link href="http://example.com/2023/10/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AF%B4%E6%98%8E/"/>
    <id>http://example.com/2023/10/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AF%B4%E6%98%8E/</id>
    <published>2023-10-03T05:32:44.000Z</published>
    <updated>2023-10-05T05:01:08.392Z</updated>
    
    <content type="html"><![CDATA[<p>使用GitHub + Hexo搭建的本博客。</p><p>教程参考<ahref="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客（超详细）- 知乎 (zhihu.com)</a>。</p><p>上面这篇文章可以说是从0到1很详细的介绍了搭建个人博客的全流程，不过仍然有许多小错误，需要结合评论区和其它博文一起阅读才会避免踩坑。</p><span id="more"></span><p>我大致总结一下流程：</p><ol type="1"><li>注册GitHub</li><li>下载Git并将Git绑定到GitHub（使用token）</li><li>购买域名</li><li>安装node.js并配置环境变量（建议全程使用cmd管理员而不是gitbash）</li><li>安装hexo</li><li>解析域名</li><li>设置并美化主题</li></ol><p>另外，博客首页的头像是用的GitHub的头像链接，另外我不打算采用图床，因为怕翻车。所以文章里的全部图片都是存储在本地并push到GitHub中，若加载不出或速度慢可以尝试挂个梯子。</p><p>域名第一年花了9块，之后续费好像是20多块一年。在阿里云买的。</p><p>看板娘参考了两篇文章：<ahref="https://github.com/stevenjoezhang/live2d-widget">设置看板娘</a>,<ahref="https://www.cnblogs.com/c10udlnk/p/14727173.html">个性化配置看板娘</a>。</p><p>但是live2d的模型默认的这几个我不是很熟悉，以后有空了想换成我自己喜欢的人物角色。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用GitHub + Hexo搭建的本博客。&lt;/p&gt;
&lt;p&gt;教程参考&lt;a
href=&quot;https://zhuanlan.zhihu.com/p/102592286&quot;&gt;从零开始搭建个人博客（超详细）
- 知乎 (zhihu.com)&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;上面这篇文章可以说是从0到1很详细的介绍了搭建个人博客的全流程，不过仍然有许多小错误，需要结合评论区和其它博文一起阅读才会避免踩坑。&lt;/p&gt;</summary>
    
    
    
    <category term="杂项" scheme="http://example.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
</feed>
